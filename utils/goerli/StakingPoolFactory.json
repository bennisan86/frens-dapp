{
  "address": "0x40a039fCB61b935E6560dD9055D549d4624eB7cA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "frensStorage_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_validatorLocked",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d23342fc055f0a33c43d2bc998adfdfd89b29884523634599dc9fa4142c5ccf",
  "receipt": {
    "to": null,
    "from": "0x6C55105954b7fd0c4Bf3df00dFD739fA71e2fD20",
    "contractAddress": "0x40a039fCB61b935E6560dD9055D549d4624eB7cA",
    "transactionIndex": 75,
    "gasUsed": "2497393",
    "logsBloom": "0x
    "blockHash": "0xcebf563c2c63445fde6d0de396671cd1401662b14cab055528bbbd50f00c3c9f",
    "transactionHash": "0x0d23342fc055f0a33c43d2bc998adfdfd89b29884523634599dc9fa4142c5ccf",
    "logs": [],
    "blockNumber": 9105174,
    "cumulativeGasUsed": "18071589",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB003C1756B0e6dDDC360372C7183B25D296CCCE3"
  ],
  "solcInputHash": "3bc19613e984972e45201a3474f4a9f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"frensStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_validatorLocked\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address,bool)\":{\"details\":\"creates a new pool\",\"returns\":{\"_0\":\"address of new pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n///@title Frens Staking Pool Contract\\n///@author 0xWildhare and the FRENS team\\n///@dev A new instance of this contract is created everytime a user makes a new pool\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensOracle.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\ncontract StakingPool is IStakingPool, Ownable{\\n    event Stake(address depositContractAddress, address caller);\\n    event DepositToPool(uint amount, address depositer, uint id);\\n\\n    modifier noZeroValueTxn() {\\n        require(msg.value > 0, \\\"must deposit ether\\\");\\n        _;\\n    }\\n\\n    modifier maxTotDep() {\\n        require(\\n            msg.value + totalDeposits <= 32 ether,\\n            \\\"total deposits cannot be more than 32 Eth\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier mustBeAccepting() {\\n        require(\\n            currentState == PoolState.acceptingDeposits,\\n            \\\"not accepting deposits\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier correctPoolOnly(uint _id) {\\n        require(\\n            frensPoolShare.poolByIds(_id) == address(this),\\n            \\\"wrong staking pool for id\\\"\\n        );\\n        _;\\n    }\\n\\n    enum PoolState {\\n        awaitingValidatorInfo,\\n        acceptingDeposits,\\n        staked,\\n        exited\\n    }\\n    PoolState currentState;\\n    \\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    struct RageQuit {\\n        uint price;\\n        uint time;\\n        bool rageQuitting;\\n    }\\n\\n    //maps the ID for each FrensPoolShare NFT in the pool to the deposit for that share\\n    mapping(uint => uint) public depositForId;\\n    //maps each ID to the rewards it has already claimed (used in calculating the claimable rewards)\\n    mapping(uint => uint) public frenPastClaim;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => bool) public locked; //transfer locked (must use ragequit)\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => RageQuit) public rageQuitInfo;\\n\\n    //total eth deposited to pool by users (does not include attestation or block rewards)\\n    uint public totalDeposits;\\n    //total amount of rewards claimed from pool (used in calculating the claimable rewards)\\n    uint public totalClaims;\\n    //these are the ids which have deposits in this pool\\n    uint[] public idsInPool;\\n\\n    //this is set in the constructor and requires the validator public key and other validator info be set before deposits can be made\\n    //also, if the validator is locked, once set, the pool owner cnnot change the validator pubkey and other info\\n    bool public validatorLocked;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    bool public transferLocked;\\n    //set as true once the validator info has been set for the pool\\n    bool public validatorSet;\\n\\n    //validator public key for pool\\n    bytes public pubKey;\\n    //validator withdrawal credentials - must be set to pool address\\n    bytes public withdrawal_credentials;\\n    //bls signature for validator\\n    bytes public signature;\\n    //deposit data root for validator\\n    bytes32 public deposit_data_root;\\n\\n    IFrensPoolShare public frensPoolShare;\\n    IFrensArt public artForPool;\\n    IFrensStorage public frensStorage;\\n\\n    /**@dev when the pool is deploied by the factory, the owner, art contract, \\n    *storage contract, and if the validator is locked are all set. \\n    *The pool state is set according to whether or not the validator is locked.\\n    */\\n    constructor(\\n        address owner_,\\n        bool validatorLocked_,\\n        IFrensStorage frensStorage_\\n    ) {\\n        frensStorage = frensStorage_;\\n        artForPool = IFrensArt(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensArt\\\"))));\\n        frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n        validatorLocked = validatorLocked_;\\n        if (validatorLocked) {\\n            currentState = PoolState.awaitingValidatorInfo;\\n        } else {\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        _transferOwnership(owner_);\\n    }\\n\\n    ///@notice This allows a user to deposit funds to the pool, and recieve an NFT representing their share\\n    ///@dev recieves funds and returns FrenspoolShare NFT\\n    function depositToPool()\\n        external\\n        payable\\n        noZeroValueTxn\\n        mustBeAccepting\\n        maxTotDep\\n    {\\n        uint id = frensPoolShare.totalSupply();\\n        depositForId[id] = msg.value;\\n        totalDeposits += msg.value;\\n        idsInPool.push(id);\\n        frenPastClaim[id] = 1; //this avoids future rounding errors in rewardclaims\\n        locked[id] = transferLocked;\\n        frensPoolShare.mint(msg.sender); //mint nft\\n        emit DepositToPool(msg.value, msg.sender, id);\\n    }\\n\\n    ///@notice allows a user to add funds to an existing NFT ID\\n    ///@dev recieves funds and increases deposit for a FrensPoolShare ID\\n    function addToDeposit(uint _id) external payable mustBeAccepting maxTotDep correctPoolOnly(_id){\\n        require(frensPoolShare.exists(_id), \\\"id does not exist\\\"); //id must exist\\n        \\n        depositForId[_id] += msg.value;\\n        totalDeposits += msg.value;\\n    }\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract, accepts validator info\\n    function stake(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        //if validator info has previously been entered, check that it is the same, then stake\\n        if (validatorSet) {\\n            require(keccak256(_pubKey) == keccak256(pubKey), \\\"pubKey mismatch\\\");\\n        } else {\\n            //if validator info has not previously been entered, enter it, then stake\\n            _setPubKey(\\n                _pubKey,\\n                _withdrawal_credentials,\\n                _signature,\\n                _deposit_data_root\\n            );\\n        }\\n        _stake();\\n    }\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract. validator info must already be entered\\n    function stake() external onlyOwner {\\n        _stake();\\n    }\\n\\n    function _stake() internal {\\n        require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n        require(totalDeposits == 32 ether, \\\"not enough deposits\\\");\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        require(validatorSet, \\\"validator not set\\\");\\n        \\n        address depositContractAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"DepositContract\\\")));\\n        currentState = PoolState.staked;\\n        IDepositContract(depositContractAddress).deposit{value: 32 ether}(\\n            pubKey,\\n            withdrawal_credentials,\\n            signature,\\n            deposit_data_root\\n        );\\n        emit Stake(depositContractAddress, msg.sender);\\n    }\\n\\n    ///@dev sets the validator info required when depositing to the deposit contract\\n    function setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        _setPubKey(\\n            _pubKey,\\n            _withdrawal_credentials,\\n            _signature,\\n            _deposit_data_root\\n        );\\n    }\\n\\n    function _setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) internal {\\n        //get expected withdrawal_credentials based on contract address\\n        bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n        //compare expected withdrawal_credentials to provided\\n        require(\\n            keccak256(_withdrawal_credentials) ==\\n                keccak256(withdrawalCredFromAddr),\\n            \\\"withdrawal credential mismatch\\\"\\n        );\\n        if (validatorLocked) {\\n            require(currentState == PoolState.awaitingValidatorInfo, \\\"wrong state\\\");\\n            assert(!validatorSet); //this should never fail\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        pubKey = _pubKey;\\n        withdrawal_credentials = _withdrawal_credentials;\\n        signature = _signature;\\n        deposit_data_root = _deposit_data_root;\\n        validatorSet = true;\\n    }\\n\\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\\n    ///@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\\n    function withdraw(uint _id, uint _amount) external mustBeAccepting {\\n        require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n        require(depositForId[_id] >= _amount, \\\"not enough deposited\\\");\\n        depositForId[_id] -= _amount;\\n        totalDeposits -= _amount;\\n        (bool success, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: _amount}(\\\"\\\");\\n        assert(success);\\n    }\\n\\n    ///@notice allows user to claim their portion of the rewards\\n    ///@dev calculates the rewards due to `_id` and sends them to the owner of `_id`\\n    function claim(uint _id) external correctPoolOnly(_id){\\n        require(\\n            currentState != PoolState.acceptingDeposits,\\n            \\\"use withdraw when not staked\\\"\\n        );\\n        require(\\n            address(this).balance > 100,\\n            \\\"must be greater than 100 wei to claim\\\"\\n        );\\n        //has the validator exited?\\n        bool exited;\\n        if (currentState != PoolState.exited) {\\n            IFrensOracle frensOracle = IFrensOracle(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensOracle\\\"))));\\n            exited = frensOracle.checkValidatorState(address(this));\\n            if (exited && currentState == PoolState.staked ){\\n                currentState = PoolState.exited;\\n            }\\n        } else exited = true;\\n        //get share for id\\n        uint amount = _getShare(_id);\\n        //claim\\n        frenPastClaim[_id] += amount;\\n        totalClaims += amount;\\n        //fee? not applied to exited\\n        uint feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\")));\\n        if (feePercent > 0 && !exited) {\\n            address feeRecipient = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"protocol.fee.recipient\\\")));\\n            uint feeAmount = (feePercent * amount) / 100;\\n            if (feeAmount > 1){ \\n                (bool success1, /*return data*/) = feeRecipient.call{value: feeAmount - 1}(\\\"\\\"); //-1 wei to avoid rounding error issues\\n                assert(success1);\\n            }\\n            amount = amount - feeAmount;\\n        }\\n        (bool success2, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: amount}(\\\"\\\");\\n        assert(success2);\\n    }\\n\\n    //getters\\n\\n    function getIdsInThisPool() public view returns(uint[] memory) {\\n      return idsInPool;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id`\\n    function getShare(uint _id) public view correctPoolOnly(_id) returns (uint) {\\n        return _getShare(_id);\\n    }\\n\\n    function _getShare(uint _id) internal view returns (uint) {\\n        if (address(this).balance == 0) return 0;\\n        uint frenDep = depositForId[_id];\\n        uint frenPastClaims = frenPastClaim[_id];\\n        uint totFrenRewards = ((frenDep * (address(this).balance + totalClaims)) / totalDeposits);\\n        if (totFrenRewards == 0) return 0;\\n        uint amount = totFrenRewards - frenPastClaims;\\n        return amount;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\\n    ///@dev this is used for the traits in the NFT\\n    function getDistributableShare(uint _id) public view returns (uint) {\\n        if (currentState == PoolState.acceptingDeposits) {\\n            return 0;\\n        } else {\\n            uint share = _getShare(_id);\\n            uint feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\")));\\n            if (feePercent > 0 && currentState != PoolState.exited) {\\n                uint feeAmount = (feePercent * share) / 100;\\n                share = share - feeAmount;\\n            }\\n            return share;\\n        }\\n    }\\n\\n    ///@return pool state\\n    function getState() public view returns (string memory) {\\n        if (currentState == PoolState.awaitingValidatorInfo)\\n            return \\\"awaiting validator info\\\";\\n        if (currentState == PoolState.staked) return \\\"staked\\\";\\n        if (currentState == PoolState.acceptingDeposits)\\n            return \\\"accepting deposits\\\";\\n        if (currentState == PoolState.exited) return \\\"exited\\\";\\n        return \\\"state failure\\\"; //should never happen\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakingPool, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n        uint uintFromAddress = uint256(uint160(a));\\n        bytes memory withdralDesired = abi.encodePacked(\\n            uintFromAddress +\\n                0x0100000000000000000000000000000000000000000000000000000000000000\\n        );\\n        return withdralDesired;\\n    }\\n\\n    ///@dev allows pool owner to change the art for the NFTs in the pool\\n    function setArt(IFrensArt newArtContract) external onlyOwner {\\n        IFrensArt newFrensArt = newArtContract;\\n        string memory newArt = newFrensArt.renderTokenById(1);\\n        require(bytes(newArt).length != 0, \\\"invalid art contract\\\");\\n        artForPool = newArtContract;\\n    }\\n\\n    // to support receiving ETH by default\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xfde58bc366758a8a26263579142c81a207b499ee972cad78918eac76e69c4aba\",\"license\":\"MIT\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n///@title Frens Staking Pool Factory\\n///@author 0xWildhare and Frens team\\n///@dev allows user to create a new staking pool\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ncontract StakingPoolFactory is IStakingPoolFactory{\\n    event Create(\\n        address indexed contractAddress,\\n        address creator,\\n        address owner\\n    );\\n\\n    IFrensPoolShare frensPoolShare;\\n    IFrensStorage frensStorage;\\n\\n    constructor(IFrensStorage frensStorage_) {\\n       frensStorage = frensStorage_;\\n       frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n    }\\n\\n    ///@dev creates a new pool\\n    ///@return address of new pool\\n    function create(\\n        address _owner,\\n        bool _validatorLocked\\n    )\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        StakingPool stakingPool = new StakingPool(\\n            _owner,\\n            _validatorLocked,\\n            frensStorage\\n        );\\n        // allow this stakingpool to mint shares in our NFT contract\\n        IAccessControl(address(frensPoolShare)).grantRole(keccak256(\\\"MINTER_ROLE\\\"),address(stakingPool));\\n        emit Create(address(stakingPool), msg.sender, address(this));\\n        return (address(stakingPool));\\n    }\\n}\\n\",\"keccak256\":\"0x5ae22fc42743fbb22327d3005dabb7347d84180f2d9d7e800c9a06defe90b78b\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    function get_deposit_count() external view returns (bytes memory);\\n\\n}\\n\",\"keccak256\":\"0x7590a7c7c977852560b0f2373e71ad175d1aa15d320d1238b2fe64e4cd1902f7\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensArt.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensArt {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfdb4c36608a20ac7f10ccb1b5d59ec26b25587860fb596dc12414b27591db2a0\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensOracle.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IFrensOracle {\\n\\n   function checkValidatorState(address pool) external returns(bool);\\n\\n   function setExiting(bytes memory pubKey, bool isExiting) external;\\n\\n}\",\"keccak256\":\"0xdf2291434faca3e9976a42d2328a4347ced5978b29477e40eb75642185afdf67\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  \\n  function poolByIds(uint _id) external view returns(address);\\n\\n  function mint(address userAddress) external;\\n\\n  function burn(uint tokenId) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0x39505e8b566da73b07b6f11e72e17e8fe4f195b371bc38e8d6aa7c83044a6456\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n   \\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n    function burnKeys() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getBool(bytes32 _key) external view returns (bool);   \\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setBool(bytes32 _key, bool _value) external;    \\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;    \\n\\n    // Arithmetic \\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    \\n}\\n\",\"keccak256\":\"0x426ac9a703a13d4127b56886421d55a8380292dadfb2693d2e8373316075f220\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPool {\\n\\n    function pubKey() external view returns(bytes memory);\\n\\n    function depositForId(uint _id) external view returns (uint);\\n\\n    function totalDeposits() external view returns(uint);\\n\\n    function transferLocked() external view returns(bool);\\n\\n    function locked(uint id) external view returns(bool);\\n\\n    function artForPool() external view returns (IFrensArt);\\n\\n    function owner() external view returns (address);\\n\\n    function depositToPool() external payable;\\n\\n    function addToDeposit(uint _id) external payable;\\n\\n    function withdraw(uint _id, uint _amount) external;\\n\\n    function claim(uint id) external;\\n\\n    function getIdsInThisPool() external view returns(uint[] memory);\\n\\n    function getShare(uint _id) external view returns (uint);\\n\\n    function getDistributableShare(uint _id) external view returns (uint);\\n\\n    function rageQuitInfo(uint id) external view returns(uint, uint, bool);\\n\\n    function setPubKey(\\n        bytes calldata pubKey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function getState() external view returns (string memory);\\n\\n    // function getDepositAmount(uint _id) external view returns(uint);\\n\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function stake() external;\\n\\n}\\n\",\"keccak256\":\"0xe1b4101e52876a0fac1abbc1cd11c0053ee1b775dc87baf60183e7d3a01b16c2\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPoolFactory {\\n\\n  function create(\\n    address _owner, \\n    bool _validatorLocked \\n    //bool frensLocked,\\n    //uint poolMin,\\n    //uint poolMax\\n   ) external returns(address);\\n\\n}\\n\",\"keccak256\":\"0x51a9513e55ce45437c8e21d18d49506cfd08b86b8f4fd76350eafc141aaa203f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604090808252346101535780612ca7803803809161001f8285610158565b833960209283918101031261015357516001600160a01b0380821692909183900361015357600180546001600160a01b0319908116851790915584516f636f6e74726163742e6164647265737360801b8382019081526d4672656e73506f6f6c536861726560901b6030830152601e825291949092838701929091906001600160401b0384118585101761013d5760248484938193828c52885190206321f8a72160e01b835260448901525afa928315610132576000936100f5575b5050501690600054161760005551612b2b908161017c8239f35b813d831161012b575b6101088185610158565b81010312610127575190828216820361012457503880806100db565b80fd5b5080fd5b503d6100fe565b86513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761013d5760405256fe6080604090808252600436101561001557600080fd5b600091823560e01c63319e90901461002c57600080fd5b346101705780600319360112610170576001600160a01b03916004358381169190829003610196576024359182151580930361019257846001541661295b938484019267ffffffffffffffff958585108786111761017e5792859491928a97969360609561019b8639835260208301528782015203019083f09384156101745780835416941693803b156101705782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101665761013f575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b8111610152576020935081523880610107565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b8a52604160045260248afd5b8580fd5b8480fdfe608060408181523462000260576060826200295b803803809162000024828562000297565b83398101031262000260576200003a82620002bb565b602092838101519081151580920362000260578301516001600160a01b03808216959186900362000260576200007033620002d0565b60018060a01b0319918683600f541617600f5585518181016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000c08162000265565b5190209087516321f8a72160e01b92838252600482015283816024818d5afa90811562000255578493929186916000916200020c575b5090602492911687600e541617600e5589518481019182526d4672656e73506f6f6c536861726560901b6030820152601e8152620001348162000265565b5190209189519a8b938492835260048301525afa9081156200020157600091620001bd575b50620001969596501690600d541617600d5560ff8019600854169116809117600855600014620001a4576000805460ff60a01b19169055620002d0565b5161263e90816200031d8239f35b6000805460ff60a01b1916600160a01b179055620002d0565b87813d8311620001f9575b620001d4818362000297565b81010312620001f65750620001ee620001969596620002bb565b869562000159565b80fd5b503d620001c8565b86513d6000823e3d90fd5b85819495969293503d83116200024d575b62000229818362000297565b81010312620001f657508392918562000244602493620002bb565b909192620000f6565b503d6200021d565b89513d6000823e3d90fd5b600080fd5b604081019081106001600160401b038211176200028157604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200028157604052565b51906001600160a01b03821682036200026057565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816312686aae14611551575080631865c57d146115205780632cf2cd48146114f95780632daad61d146114d257806330dbf887146114a9578063379607f514610fee5780633a4b66f114610fd457806341c6138314610fb5578063441a3e7014610df157806345b58fe414610d3e5780634b2b4e3614610c8457806351ff484714610bec578063591167c714610bc3578063678e300a14610ba0578063715018a614610b435780637d88209714610b245780638620891c146109a7578063888e9cf81461095a5780638ae578fd146109315780638da5cb5b146109095780639426e226146108e2578063ac2a5dfd1461084a578063b45a3c0e1461081e578063cfb5a5f814610775578063e2d9ae3e14610756578063e3f05d8314610732578063e4a502761461065b578063e6b1a3ae14610524578063e920eec0146104f6578063f2fde38b1461042e578063f9faa104146101cd5763fc03bad20361001157346101c95760203660031901126101c957606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b50826003193601126101c95734156103f75760ff835460a01c16818110156103e45760016101fb91146117d2565b61021b6801bc16d674ec80000061021460055434611817565b111561183a565b600d5482516318160ddd60e01b815260209290916001600160a01b0390849084908490829085165afa9283156103815786936103b1575b5082865260018452348587205561026b34600554611817565b6005556007546801000000000000000081101561039e57600181018060075581101561038b5790838793927fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801558383526002855260018684205560ff60085460081c16600386528684209060ff801983541691151516179055600d5416803b156101c957829060248751809581936335313c2160e11b835233878401525af1801561038157610350575b50507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc91606091845191348352339083015284820152a151f35b67ffffffffffffffff829693961161036e5750835292816060610316565b634e487b7160e01b835260419052602482fd5b85513d88823e3d90fd5b634e487b7160e01b875260328352602487fd5b634e487b7160e01b875260418352602487fd5b9092508381813d83116103dd575b6103c98183611758565b810103126103d957519138610252565b8580fd5b503d6103bf565b634e487b7160e01b845260218252602484fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b50346101c95760203660031901126101c9576001600160a01b03813581811692908390036104f25761045e61177a565b82156104a0575083546001600160a01b0319811683178555925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b5050346105205761051d610509366115f0565b9561051895919594929461177a565b611dec565b51f35b5080fd5b50346101c957602090816003193601126106575780356001600160a01b03811692908390036104f25761055561177a565b835163516b636d60e11b81526001838201528581602481875afa9081156103815786916105da575b5051156105a15750506bffffffffffffffffffffffff60a01b600e541617600e5551f35b835162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e6105eb8183611758565b81019082818303126106535780519067ffffffffffffffff821161064f570181601f820112156106535780516106208161191b565b9261062d88519485611758565b81845284828401011161064f5761064991848085019101611575565b3861057d565b8780fd5b8680fd5b8380fd5b50503461052057816003193601126105205780519082600a5461067d8161165a565b8085529160019180831690811561070a57506001146106bf575b5050506106a9826106bb940383611758565b51918291602083526020830190611598565b0390f35b9450600a85526000805160206125a98339815191525b8286106106f2575050506106a98260206106bb9582010194610697565b805460208787018101919091529095019481016106d5565b6106bb9750869350602092506106a994915060ff191682840152151560051b82010194610697565b50503461052057816003193601126105205760209060ff6008541690519015158152f35b505034610520578160031936011261052057602090600c549051908152f35b50346101c95760203660031901126101c957600d548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa91821561081457916107d9916107de9493602097926107e5575b501630146118b7565b61230f565b9051908152f35b610806919250873d811161080d575b6107fe8183611758565b810190611898565b90386107d0565b503d6107f4565b84513d87823e3d90fd5b50346101c95760203660031901126101c9578160209360ff923581526003855220541690519015158152f35b5050346105205781600319360112610520578051908260095461086c8161165a565b8085529160019180831690811561070a5750600114610897575050506106a9826106bb940383611758565b9450600985526000805160206125c98339815191525b8286106108ca575050506106a98260206106bb9582010194610697565b805460208787018101919091529095019481016108ad565b50503461052057816003193601126105205760209060ff60085460101c1690519015158152f35b505034610520578160031936011261052057905490516001600160a01b039091168152602090f35b505034610520578160031936011261052057600e5490516001600160a01b039091168152602090f35b50346101c95760203660031901126101c957356007548110156101c9576007602093527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801549051908152f35b50602090816003193601126106575780359060ff855460a01c1681811015610b115760016109d591146117d2565b6109ee6801bc16d674ec80000061021460055434611817565b600d548451631dc82a7560e01b8152828101849052906001600160a01b039081168583602481845afa928315610b07576024938793610a36928b92610aef57501630146118b7565b865192838092634f558e7960e01b825287878301525afa908115610381578691610ac2575b5015610a8b575090600191845252808220610a77348254611817565b9055610a8534600554611817565b60055551f35b835162461bcd60e51b815290810183905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b610ae29150843d8611610ae8575b610ada8183611758565b810190611903565b38610a5b565b503d610ad0565b610806919250853d871161080d576107fe8183611758565b87513d8a823e3d90fd5b634e487b7160e01b865260218252602486fd5b5050346105205781600319360112610520576020906005549051908152f35b505034610520578160031936011261052057610b5d61177a565b81546001600160a01b03198116835590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b509134610bc0576020366003190112610bc057506107de60209235612382565b80fd5b505034610520578160031936011261052057600d5490516001600160a01b039091168152602090f35b50503461052057816003193601126105205780519082600b54610c0e8161165a565b8085529160019180831690811561070a5750600114610c39575050506106a9826106bb940383611758565b9450600b85526000805160206125e98339815191525b828610610c6c575050506106a98260206106bb9582010194610697565b80546020878701810191909152909501948101610c4f565b50346101c957610c93366115f0565b92610ca4979695949792919261177a565b60085460101c60ff1615610d2a5750505050610cc39293503691611937565b602081519101208251610ce081610cd981611694565b0382611758565b6020815191012003610cf657505b61051d6119a8565b6020606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b92955092610d39969194611dec565b610cee565b828434610bc05780600319360112610bc0579080519182906007549182855260208095018093600784527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890845b818110610ddd5750505081610da2910382611758565b83519485948186019282875251809352850193925b828110610dc657505050500390f35b835185528695509381019392810192600101610db7565b825484529288019260019283019201610d8c565b50346101c957816003193601126101c9578035602480359260ff865460a01c1681811015610fa3576001610e2591146117d2565b600d5485516331a9108f60e11b8082528382018690526020949290916001600160a01b0391869082908690829086165afa8015610f995782918b91610f7c575b50163303610f4a578589526001855286888a205410610f1157918493918695938a97885260018552898820610e9b8a82546122bf565b9055610ea9896005546122bf565b600555600d54168951968794859384528301525afa8015610f075761051d94849384938493610ee8575b50508651915af1610ee26122cc565b50611dcf565b610eff929350803d1061080d576107fe8183611758565b903880610ed3565b85513d85823e3d90fd5b875162461bcd60e51b8152808501869052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b875162461bcd60e51b8152808501869052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b610f939150873d891161080d576107fe8183611758565b38610e65565b89513d8c823e3d90fd5b50634e487b7160e01b86526021905284fd5b5050346105205781600319360112610520576020906006549051908152f35b505034610520578160031936011261052057610cee61177a565b5091903461052057602092836003193601126101c95783813560018060a01b0380600d5416855197888092631dc82a7560e01b8252858883015260249a8b915afa9081156113b6579061104c91889161148c575b50821630146118b7565b60ff865460a01c168481101561147a57600181146114385760644711156113e8576003146113dd5780600f5416838651818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b81526110b781611726565b519020898851809481936321f8a72160e01b83528a8301525afa9081156113b657938289829594938a989789916113c0575b50895163404df7b160e11b815230898201529889938492165af19485156113b6578795611397575b50848061136c575b611356575b6111278261230f565b948288526002845286882061113d878254611817565b905561114b86600654611817565b60065581600f541690875185810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b82526014815261118181611726565b5190209088519163bd02d0f560e01b83528783015285828c81865afa918215610f99578a92611323575b50811515908161131a575b50611205575b50509086978392600d98969798541694885195869384926331a9108f60e11b84528301525afa8015610f075761051d94849384938493610ee85750508651915af1610ee26122cc565b8488979293975181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b82526016815261123981611726565b5190208b8a51809681936321f8a72160e01b83528b8301525afa9283156113105789936112e8575b5061126e826064926122fc565b049160018311611299575b509761128c849392899a999798996122bf565b95979691928199506111bc565b60001983018381116112d65792899a926112c78b808061128c968e9f9d9e998c9b9a51915af1610ee26122cc565b929a5092935097969597611279565b634e487b7160e01b8a52601187528a8afd5b60649193508261130761126e92883d8a1161080d576107fe8183611758565b94925050611261565b88513d8b823e3d90fd5b905015386111b6565b9091508581813d831161134f575b61133b8183611758565b8101031261134b575190386111ab565b8980fd5b503d611331565b865460ff60a01b1916600360a01b17875561111e565b5060ff875460a01c168481101561138557600214611119565b634e487b7160e01b8852602185528888fd5b6113af919550833d8511610ae857610ada8183611758565b9338611111565b86513d89823e3d90fd5b6113d79150843d861161080d576107fe8183611758565b386110e9565b92919060019361111e565b855162461bcd60e51b81528086018590526025818a01527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152808601859052601c818a01527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602185528787fd5b6114a39150853d871161080d576107fe8183611758565b38611042565b505034610520578160031936011261052057600f5490516001600160a01b039091168152602090f35b50346101c95760203660031901126101c95760209282913581526001845220549051908152f35b50346101c95760203660031901126101c95760209282913581526002845220549051908152f35b5050346105205781600319360112610520576106bb9061153e6124a2565b9051918291602083526020830190611598565b84903461052057816003193601126105205760209060ff60085460081c1615158152f35b60005b8381106115885750506000910152565b8181015183820152602001611578565b906020916115b181518092818552858086019101611575565b601f01601f1916010190565b9181601f840112156115eb5782359167ffffffffffffffff83116115eb57602083818601950101116115eb57565b600080fd5b9060806003198301126115eb5767ffffffffffffffff6004358181116115eb578361161d916004016115bd565b939093926024358381116115eb5782611638916004016115bd565b939093926044359182116115eb57611652916004016115bd565b909160643590565b90600182811c9216801561168a575b602083101461167457565b634e487b7160e01b600052602260045260246000fd5b91607f1691611669565b600954600092916116a48261165a565b8082529160019081811690811561170957506001146116c257505050565b9192935060096000526000805160206125c9833981519152916000925b8484106116f157505060209250010190565b805460208585018101919091529093019281016116df565b915050602093945060ff929192191683830152151560051b010190565b6040810190811067ffffffffffffffff82111761174257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761174257604052565b6000546001600160a01b0316330361178e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156117d957565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b9190820180921161182457565b634e487b7160e01b600052601160045260246000fd5b1561184157565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b908160209103126115eb57516001600160a01b03811681036115eb5790565b156118be57565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b908160209103126115eb575180151581036115eb5790565b67ffffffffffffffff811161174257601f01601f191660200190565b9291926119438261191b565b916119516040519384611758565b8294818452818301116115eb578281602093846000960137010152565b1561197557565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec80000090814710611d99578160055403611d5e57600080549260ff8460a01c169360049485811015611d4b576119e8600180921461196e565b60ff60085460101c1615611d135760018060a01b039384600f54166040958651602095868201937f65787465726e616c2e636f6e74726163742e616464726573730000000000000085526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603984015260288352606083019067ffffffffffffffff9584831087841117611cff57828c52845190206321f8a72160e01b835260648501528890829060249082905afa928315611cf5578693611cc0575b505060ff60a01b1916600160a11b178455600c54911695863b156106575787516304512a2360e31b815260808b82015294849286929190611ada60848501611694565b60031985820381016024870152600a54879492611af68261165a565b918282528d8582169182600014611ca1575050600114611c58575b50508584030160448601528592600b5491611b2b8361165a565b92838352878d8383169283600014611c3757505050600114611beb575b5050508391829160648301520391895af18015611be157611b98575b5050507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293945082519182523390820152a1565b8211611bce57507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce192949550835284933880611b64565b634e487b7160e01b815260418752602490fd5b86513d84823e3d90fd5b918b939450600b88526000805160206125e98339815191529288935b828510611c1c57505050010190808480611b48565b80548486018701528b99508c98508d95909401938101611c07565b60ff19168582015294151560051b9093019093019450839250819050611b48565b8c929550600a89526000805160206125a98339815191529189925b818410611c865750500101923880611b11565b80548385018601528c9a508d99508e94909301928501611c73565b60ff19168382015292151560051b909101909101945038905080611b11565b611ce592935060609089903d8b11611ced575b611cdd8285611758565b010190611898565b903880611a97565b3d9150611cd3565b8a513d88823e3d90fd5b50634e487b7160e01b875260418d52602487fd5b60405162461bcd60e51b815260208188015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b634e487b7160e01b845260218652602484fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b15611dd657565b634e487b7160e01b600052600160045260246000fd5b929094939194600160f81b30019081301161182457604051602092838201908152838252611e1982611726565b611e2436868b611937565b848151910120915190200361227a5760085460ff8116612220575b5060009260ff845460a01c1697600489101561220c57611e626001809a1461196e565b67ffffffffffffffff928381116121f85780611e7f60095461165a565b98601f998a811161219d575b5087908a831160011461212757889261211c575b5050600019600383901b1c1916908a1b176009555b828211612108578190611ec8600a5461165a565b8881116120ad575b508590888311600114612040578692612035575b5050600019600383901b1c191690881b17600a555b851161202157611f0a600b5461165a565b848111611fd1575b5081938511600114611f5f575091839491849394611f54575b50501b916000199060031b1c191617600b555b600c556201000062ff0000196008541617600855565b013592503880611f2b565b600b82526000805160206125e983398151915293918591601f19831691905b88838310611fb75750505010611f9d575b505050811b01600b55611f3e565b0135600019600384901b60f8161c19169055388080611f8f565b868601358855909601959384019387935090810190611f7e565b600b83526000805160206125e98339815191528580880160051c820192848910612018575b0160051c019087905b82811061200d575050611f12565b848155018790611fff565b92508192611ff6565b634e487b7160e01b82526041600452602482fd5b013590503880611ee4565b600a87528a93506000805160206125a983398151915291601f198416885b88828210612097575050841161207d575b505050811b01600a55611ef9565b0135600019600384901b60f8161c1916905538808061206f565b8385013586558e9790950194928301920161205e565b909150600a86526000805160206125a98339815191528880850160051c8201928786106120ff575b918c91869594930160051c01915b8281106120f1575050611ed0565b8881558594508c91016120e3565b925081926120d5565b634e487b7160e01b85526041600452602485fd5b013590503880611e9f565b600989528c93506000805160206125c983398151915291601f1984168a5b8a82821061217e5750508411612164575b505050811b01600955611eb4565b0135600019600384901b60f8161c19169055388080612156565b91929596849587849396013581550195019201908e9594939291612145565b909150600988526000805160206125c98339815191528a80850160051c8201928986106121ef575b918e91869594930160051c01915b8281106121e1575050611e8b565b8a81558594508e91016121d3565b925081926121c5565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526021600452602485fd5b6000549060ff8260a01c1660048110156122645761224e9161224460ff921561196e565b60101c1615611dcf565b60ff60a01b1916600160a01b1760005538611e3f565b634e487b7160e01b600052602160045260246000fd5b60405162461bcd60e51b815260048101839052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b9190820391821161182457565b3d156122f7573d906122dd8261191b565b916122eb6040519384611758565b82523d6000602084013e565b606090565b8060001904821181151516611824570290565b471561237c57600090815260016020526040812054600260205261234560408320549161233f4760065490611817565b906122fc565b600554908115612368570480156123635761236092506122bf565b90565b505090565b634e487b7160e01b84526012600452602484fd5b50600090565b600060ff815460a01c1691600483101561248e57600183036123a45750905090565b6123ad9061230f565b9160018060a01b03600f5416602060405181810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b8252601481526123e981611726565b51902060246040518094819363bd02d0f560e01b835260048301525afa92831561248257809361244c575b50508115159081612440575b50612429575090565b90606461243982612360946122fc565b04906122bf565b60039150141538612420565b909192506020823d821161247a575b8161246860209383611758565b81010312610bc0575051903880612414565b3d915061245b565b604051903d90823e3d90fd5b634e487b7160e01b82526021600452602482fd5b60ff60005460a01c16600481101561226457801561256e576002811461254b576001811461251c576003146124fa576040516124dd81611726565b600d81526c7374617465206661696c75726560981b602082015290565b60405161250681611726565b6006815265195e1a5d195960d21b602082015290565b5060405161252981611726565b6012815271616363657074696e67206465706f7369747360701b602082015290565b5060405161255881611726565b60068152651cdd185ad95960d21b602082015290565b5060405161257b81611726565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a86e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9a26469706673582212201d176459bf14e31965b74dabd6fa732908a89cf4cc94bcc50b1e3dbc97d66b5d64736f6c63430008100033a264697066735822122084ca096e8c53a39c033d4d9426e08483b3ae6dfb67c1ce302c9b2044a9f94a7264736f6c63430008100033",
  "deployedBytecode": "0x6080604090808252600436101561001557600080fd5b600091823560e01c63319e90901461002c57600080fd5b346101705780600319360112610170576001600160a01b03916004358381169190829003610196576024359182151580930361019257846001541661295b938484019267ffffffffffffffff958585108786111761017e5792859491928a97969360609561019b8639835260208301528782015203019083f09384156101745780835416941693803b156101705782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101665761013f575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b8111610152576020935081523880610107565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b8a52604160045260248afd5b8580fd5b8480fdfe608060408181523462000260576060826200295b803803809162000024828562000297565b83398101031262000260576200003a82620002bb565b602092838101519081151580920362000260578301516001600160a01b03808216959186900362000260576200007033620002d0565b60018060a01b0319918683600f541617600f5585518181016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000c08162000265565b5190209087516321f8a72160e01b92838252600482015283816024818d5afa90811562000255578493929186916000916200020c575b5090602492911687600e541617600e5589518481019182526d4672656e73506f6f6c536861726560901b6030820152601e8152620001348162000265565b5190209189519a8b938492835260048301525afa9081156200020157600091620001bd575b50620001969596501690600d541617600d5560ff8019600854169116809117600855600014620001a4576000805460ff60a01b19169055620002d0565b5161263e90816200031d8239f35b6000805460ff60a01b1916600160a01b179055620002d0565b87813d8311620001f9575b620001d4818362000297565b81010312620001f65750620001ee620001969596620002bb565b869562000159565b80fd5b503d620001c8565b86513d6000823e3d90fd5b85819495969293503d83116200024d575b62000229818362000297565b81010312620001f657508392918562000244602493620002bb565b909192620000f6565b503d6200021d565b89513d6000823e3d90fd5b600080fd5b604081019081106001600160401b038211176200028157604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200028157604052565b51906001600160a01b03821682036200026057565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816312686aae14611551575080631865c57d146115205780632cf2cd48146114f95780632daad61d146114d257806330dbf887146114a9578063379607f514610fee5780633a4b66f114610fd457806341c6138314610fb5578063441a3e7014610df157806345b58fe414610d3e5780634b2b4e3614610c8457806351ff484714610bec578063591167c714610bc3578063678e300a14610ba0578063715018a614610b435780637d88209714610b245780638620891c146109a7578063888e9cf81461095a5780638ae578fd146109315780638da5cb5b146109095780639426e226146108e2578063ac2a5dfd1461084a578063b45a3c0e1461081e578063cfb5a5f814610775578063e2d9ae3e14610756578063e3f05d8314610732578063e4a502761461065b578063e6b1a3ae14610524578063e920eec0146104f6578063f2fde38b1461042e578063f9faa104146101cd5763fc03bad20361001157346101c95760203660031901126101c957606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b50826003193601126101c95734156103f75760ff835460a01c16818110156103e45760016101fb91146117d2565b61021b6801bc16d674ec80000061021460055434611817565b111561183a565b600d5482516318160ddd60e01b815260209290916001600160a01b0390849084908490829085165afa9283156103815786936103b1575b5082865260018452348587205561026b34600554611817565b6005556007546801000000000000000081101561039e57600181018060075581101561038b5790838793927fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801558383526002855260018684205560ff60085460081c16600386528684209060ff801983541691151516179055600d5416803b156101c957829060248751809581936335313c2160e11b835233878401525af1801561038157610350575b50507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc91606091845191348352339083015284820152a151f35b67ffffffffffffffff829693961161036e5750835292816060610316565b634e487b7160e01b835260419052602482fd5b85513d88823e3d90fd5b634e487b7160e01b875260328352602487fd5b634e487b7160e01b875260418352602487fd5b9092508381813d83116103dd575b6103c98183611758565b810103126103d957519138610252565b8580fd5b503d6103bf565b634e487b7160e01b845260218252602484fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b50346101c95760203660031901126101c9576001600160a01b03813581811692908390036104f25761045e61177a565b82156104a0575083546001600160a01b0319811683178555925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b5050346105205761051d610509366115f0565b9561051895919594929461177a565b611dec565b51f35b5080fd5b50346101c957602090816003193601126106575780356001600160a01b03811692908390036104f25761055561177a565b835163516b636d60e11b81526001838201528581602481875afa9081156103815786916105da575b5051156105a15750506bffffffffffffffffffffffff60a01b600e541617600e5551f35b835162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e6105eb8183611758565b81019082818303126106535780519067ffffffffffffffff821161064f570181601f820112156106535780516106208161191b565b9261062d88519485611758565b81845284828401011161064f5761064991848085019101611575565b3861057d565b8780fd5b8680fd5b8380fd5b50503461052057816003193601126105205780519082600a5461067d8161165a565b8085529160019180831690811561070a57506001146106bf575b5050506106a9826106bb940383611758565b51918291602083526020830190611598565b0390f35b9450600a85526000805160206125a98339815191525b8286106106f2575050506106a98260206106bb9582010194610697565b805460208787018101919091529095019481016106d5565b6106bb9750869350602092506106a994915060ff191682840152151560051b82010194610697565b50503461052057816003193601126105205760209060ff6008541690519015158152f35b505034610520578160031936011261052057602090600c549051908152f35b50346101c95760203660031901126101c957600d548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa91821561081457916107d9916107de9493602097926107e5575b501630146118b7565b61230f565b9051908152f35b610806919250873d811161080d575b6107fe8183611758565b810190611898565b90386107d0565b503d6107f4565b84513d87823e3d90fd5b50346101c95760203660031901126101c9578160209360ff923581526003855220541690519015158152f35b5050346105205781600319360112610520578051908260095461086c8161165a565b8085529160019180831690811561070a5750600114610897575050506106a9826106bb940383611758565b9450600985526000805160206125c98339815191525b8286106108ca575050506106a98260206106bb9582010194610697565b805460208787018101919091529095019481016108ad565b50503461052057816003193601126105205760209060ff60085460101c1690519015158152f35b505034610520578160031936011261052057905490516001600160a01b039091168152602090f35b505034610520578160031936011261052057600e5490516001600160a01b039091168152602090f35b50346101c95760203660031901126101c957356007548110156101c9576007602093527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801549051908152f35b50602090816003193601126106575780359060ff855460a01c1681811015610b115760016109d591146117d2565b6109ee6801bc16d674ec80000061021460055434611817565b600d548451631dc82a7560e01b8152828101849052906001600160a01b039081168583602481845afa928315610b07576024938793610a36928b92610aef57501630146118b7565b865192838092634f558e7960e01b825287878301525afa908115610381578691610ac2575b5015610a8b575090600191845252808220610a77348254611817565b9055610a8534600554611817565b60055551f35b835162461bcd60e51b815290810183905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b610ae29150843d8611610ae8575b610ada8183611758565b810190611903565b38610a5b565b503d610ad0565b610806919250853d871161080d576107fe8183611758565b87513d8a823e3d90fd5b634e487b7160e01b865260218252602486fd5b5050346105205781600319360112610520576020906005549051908152f35b505034610520578160031936011261052057610b5d61177a565b81546001600160a01b03198116835590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b509134610bc0576020366003190112610bc057506107de60209235612382565b80fd5b505034610520578160031936011261052057600d5490516001600160a01b039091168152602090f35b50503461052057816003193601126105205780519082600b54610c0e8161165a565b8085529160019180831690811561070a5750600114610c39575050506106a9826106bb940383611758565b9450600b85526000805160206125e98339815191525b828610610c6c575050506106a98260206106bb9582010194610697565b80546020878701810191909152909501948101610c4f565b50346101c957610c93366115f0565b92610ca4979695949792919261177a565b60085460101c60ff1615610d2a5750505050610cc39293503691611937565b602081519101208251610ce081610cd981611694565b0382611758565b6020815191012003610cf657505b61051d6119a8565b6020606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b92955092610d39969194611dec565b610cee565b828434610bc05780600319360112610bc0579080519182906007549182855260208095018093600784527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890845b818110610ddd5750505081610da2910382611758565b83519485948186019282875251809352850193925b828110610dc657505050500390f35b835185528695509381019392810192600101610db7565b825484529288019260019283019201610d8c565b50346101c957816003193601126101c9578035602480359260ff865460a01c1681811015610fa3576001610e2591146117d2565b600d5485516331a9108f60e11b8082528382018690526020949290916001600160a01b0391869082908690829086165afa8015610f995782918b91610f7c575b50163303610f4a578589526001855286888a205410610f1157918493918695938a97885260018552898820610e9b8a82546122bf565b9055610ea9896005546122bf565b600555600d54168951968794859384528301525afa8015610f075761051d94849384938493610ee8575b50508651915af1610ee26122cc565b50611dcf565b610eff929350803d1061080d576107fe8183611758565b903880610ed3565b85513d85823e3d90fd5b875162461bcd60e51b8152808501869052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b875162461bcd60e51b8152808501869052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b610f939150873d891161080d576107fe8183611758565b38610e65565b89513d8c823e3d90fd5b50634e487b7160e01b86526021905284fd5b5050346105205781600319360112610520576020906006549051908152f35b505034610520578160031936011261052057610cee61177a565b5091903461052057602092836003193601126101c95783813560018060a01b0380600d5416855197888092631dc82a7560e01b8252858883015260249a8b915afa9081156113b6579061104c91889161148c575b50821630146118b7565b60ff865460a01c168481101561147a57600181146114385760644711156113e8576003146113dd5780600f5416838651818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b81526110b781611726565b519020898851809481936321f8a72160e01b83528a8301525afa9081156113b657938289829594938a989789916113c0575b50895163404df7b160e11b815230898201529889938492165af19485156113b6578795611397575b50848061136c575b611356575b6111278261230f565b948288526002845286882061113d878254611817565b905561114b86600654611817565b60065581600f541690875185810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b82526014815261118181611726565b5190209088519163bd02d0f560e01b83528783015285828c81865afa918215610f99578a92611323575b50811515908161131a575b50611205575b50509086978392600d98969798541694885195869384926331a9108f60e11b84528301525afa8015610f075761051d94849384938493610ee85750508651915af1610ee26122cc565b8488979293975181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b82526016815261123981611726565b5190208b8a51809681936321f8a72160e01b83528b8301525afa9283156113105789936112e8575b5061126e826064926122fc565b049160018311611299575b509761128c849392899a999798996122bf565b95979691928199506111bc565b60001983018381116112d65792899a926112c78b808061128c968e9f9d9e998c9b9a51915af1610ee26122cc565b929a5092935097969597611279565b634e487b7160e01b8a52601187528a8afd5b60649193508261130761126e92883d8a1161080d576107fe8183611758565b94925050611261565b88513d8b823e3d90fd5b905015386111b6565b9091508581813d831161134f575b61133b8183611758565b8101031261134b575190386111ab565b8980fd5b503d611331565b865460ff60a01b1916600360a01b17875561111e565b5060ff875460a01c168481101561138557600214611119565b634e487b7160e01b8852602185528888fd5b6113af919550833d8511610ae857610ada8183611758565b9338611111565b86513d89823e3d90fd5b6113d79150843d861161080d576107fe8183611758565b386110e9565b92919060019361111e565b855162461bcd60e51b81528086018590526025818a01527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152808601859052601c818a01527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602185528787fd5b6114a39150853d871161080d576107fe8183611758565b38611042565b505034610520578160031936011261052057600f5490516001600160a01b039091168152602090f35b50346101c95760203660031901126101c95760209282913581526001845220549051908152f35b50346101c95760203660031901126101c95760209282913581526002845220549051908152f35b5050346105205781600319360112610520576106bb9061153e6124a2565b9051918291602083526020830190611598565b84903461052057816003193601126105205760209060ff60085460081c1615158152f35b60005b8381106115885750506000910152565b8181015183820152602001611578565b906020916115b181518092818552858086019101611575565b601f01601f1916010190565b9181601f840112156115eb5782359167ffffffffffffffff83116115eb57602083818601950101116115eb57565b600080fd5b9060806003198301126115eb5767ffffffffffffffff6004358181116115eb578361161d916004016115bd565b939093926024358381116115eb5782611638916004016115bd565b939093926044359182116115eb57611652916004016115bd565b909160643590565b90600182811c9216801561168a575b602083101461167457565b634e487b7160e01b600052602260045260246000fd5b91607f1691611669565b600954600092916116a48261165a565b8082529160019081811690811561170957506001146116c257505050565b9192935060096000526000805160206125c9833981519152916000925b8484106116f157505060209250010190565b805460208585018101919091529093019281016116df565b915050602093945060ff929192191683830152151560051b010190565b6040810190811067ffffffffffffffff82111761174257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761174257604052565b6000546001600160a01b0316330361178e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156117d957565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b9190820180921161182457565b634e487b7160e01b600052601160045260246000fd5b1561184157565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b908160209103126115eb57516001600160a01b03811681036115eb5790565b156118be57565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b908160209103126115eb575180151581036115eb5790565b67ffffffffffffffff811161174257601f01601f191660200190565b9291926119438261191b565b916119516040519384611758565b8294818452818301116115eb578281602093846000960137010152565b1561197557565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec80000090814710611d99578160055403611d5e57600080549260ff8460a01c169360049485811015611d4b576119e8600180921461196e565b60ff60085460101c1615611d135760018060a01b039384600f54166040958651602095868201937f65787465726e616c2e636f6e74726163742e616464726573730000000000000085526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603984015260288352606083019067ffffffffffffffff9584831087841117611cff57828c52845190206321f8a72160e01b835260648501528890829060249082905afa928315611cf5578693611cc0575b505060ff60a01b1916600160a11b178455600c54911695863b156106575787516304512a2360e31b815260808b82015294849286929190611ada60848501611694565b60031985820381016024870152600a54879492611af68261165a565b918282528d8582169182600014611ca1575050600114611c58575b50508584030160448601528592600b5491611b2b8361165a565b92838352878d8383169283600014611c3757505050600114611beb575b5050508391829160648301520391895af18015611be157611b98575b5050507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293945082519182523390820152a1565b8211611bce57507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce192949550835284933880611b64565b634e487b7160e01b815260418752602490fd5b86513d84823e3d90fd5b918b939450600b88526000805160206125e98339815191529288935b828510611c1c57505050010190808480611b48565b80548486018701528b99508c98508d95909401938101611c07565b60ff19168582015294151560051b9093019093019450839250819050611b48565b8c929550600a89526000805160206125a98339815191529189925b818410611c865750500101923880611b11565b80548385018601528c9a508d99508e94909301928501611c73565b60ff19168382015292151560051b909101909101945038905080611b11565b611ce592935060609089903d8b11611ced575b611cdd8285611758565b010190611898565b903880611a97565b3d9150611cd3565b8a513d88823e3d90fd5b50634e487b7160e01b875260418d52602487fd5b60405162461bcd60e51b815260208188015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b634e487b7160e01b845260218652602484fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b15611dd657565b634e487b7160e01b600052600160045260246000fd5b929094939194600160f81b30019081301161182457604051602092838201908152838252611e1982611726565b611e2436868b611937565b848151910120915190200361227a5760085460ff8116612220575b5060009260ff845460a01c1697600489101561220c57611e626001809a1461196e565b67ffffffffffffffff928381116121f85780611e7f60095461165a565b98601f998a811161219d575b5087908a831160011461212757889261211c575b5050600019600383901b1c1916908a1b176009555b828211612108578190611ec8600a5461165a565b8881116120ad575b508590888311600114612040578692612035575b5050600019600383901b1c191690881b17600a555b851161202157611f0a600b5461165a565b848111611fd1575b5081938511600114611f5f575091839491849394611f54575b50501b916000199060031b1c191617600b555b600c556201000062ff0000196008541617600855565b013592503880611f2b565b600b82526000805160206125e983398151915293918591601f19831691905b88838310611fb75750505010611f9d575b505050811b01600b55611f3e565b0135600019600384901b60f8161c19169055388080611f8f565b868601358855909601959384019387935090810190611f7e565b600b83526000805160206125e98339815191528580880160051c820192848910612018575b0160051c019087905b82811061200d575050611f12565b848155018790611fff565b92508192611ff6565b634e487b7160e01b82526041600452602482fd5b013590503880611ee4565b600a87528a93506000805160206125a983398151915291601f198416885b88828210612097575050841161207d575b505050811b01600a55611ef9565b0135600019600384901b60f8161c1916905538808061206f565b8385013586558e9790950194928301920161205e565b909150600a86526000805160206125a98339815191528880850160051c8201928786106120ff575b918c91869594930160051c01915b8281106120f1575050611ed0565b8881558594508c91016120e3565b925081926120d5565b634e487b7160e01b85526041600452602485fd5b013590503880611e9f565b600989528c93506000805160206125c983398151915291601f1984168a5b8a82821061217e5750508411612164575b505050811b01600955611eb4565b0135600019600384901b60f8161c19169055388080612156565b91929596849587849396013581550195019201908e9594939291612145565b909150600988526000805160206125c98339815191528a80850160051c8201928986106121ef575b918e91869594930160051c01915b8281106121e1575050611e8b565b8a81558594508e91016121d3565b925081926121c5565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526021600452602485fd5b6000549060ff8260a01c1660048110156122645761224e9161224460ff921561196e565b60101c1615611dcf565b60ff60a01b1916600160a01b1760005538611e3f565b634e487b7160e01b600052602160045260246000fd5b60405162461bcd60e51b815260048101839052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b9190820391821161182457565b3d156122f7573d906122dd8261191b565b916122eb6040519384611758565b82523d6000602084013e565b606090565b8060001904821181151516611824570290565b471561237c57600090815260016020526040812054600260205261234560408320549161233f4760065490611817565b906122fc565b600554908115612368570480156123635761236092506122bf565b90565b505090565b634e487b7160e01b84526012600452602484fd5b50600090565b600060ff815460a01c1691600483101561248e57600183036123a45750905090565b6123ad9061230f565b9160018060a01b03600f5416602060405181810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b8252601481526123e981611726565b51902060246040518094819363bd02d0f560e01b835260048301525afa92831561248257809361244c575b50508115159081612440575b50612429575090565b90606461243982612360946122fc565b04906122bf565b60039150141538612420565b909192506020823d821161247a575b8161246860209383611758565b81010312610bc0575051903880612414565b3d915061245b565b604051903d90823e3d90fd5b634e487b7160e01b82526021600452602482fd5b60ff60005460a01c16600481101561226457801561256e576002811461254b576001811461251c576003146124fa576040516124dd81611726565b600d81526c7374617465206661696c75726560981b602082015290565b60405161250681611726565b6006815265195e1a5d195960d21b602082015290565b5060405161252981611726565b6012815271616363657074696e67206465706f7369747360701b602082015290565b5060405161255881611726565b60068152651cdd185ad95960d21b602082015290565b5060405161257b81611726565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a86e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9a26469706673582212201d176459bf14e31965b74dabd6fa732908a89cf4cc94bcc50b1e3dbc97d66b5d64736f6c63430008100033a264697066735822122084ca096e8c53a39c033d4d9426e08483b3ae6dfb67c1ce302c9b2044a9f94a7264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address,bool)": {
        "details": "creates a new pool",
        "returns": {
          "_0": "address of new pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6088,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFrensPoolShare)6450"
      },
      {
        "astId": 6091,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFrensStorage)6550"
      }
    ],
    "types": {
      "t_contract(IFrensPoolShare)6450": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)6550": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      }
    }
  }
}