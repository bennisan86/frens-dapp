{
  "address": "0xc1cF9d7c79B353D363034979041C2A47078b535d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "frensStorage_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_validatorLocked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_frensLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_poolMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolMax",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f3bf5a2d34e8209f99cce299325b0f0ce6445e63e13062d86fb38b2e92d08ba",
  "receipt": {
    "to": null,
    "from": "0x6C55105954b7fd0c4Bf3df00dFD739fA71e2fD20",
    "contractAddress": "0xc1cF9d7c79B353D363034979041C2A47078b535d",
    "transactionIndex": 55,
    "gasUsed": "3282342",
    "logsBloom": "0x
    "blockHash": "0xf7eb67eaac1d943c78ed3e96e5fc3a5341ba7c6e5e59f509c4bc8dc7df8f2506",
    "transactionHash": "0x3f3bf5a2d34e8209f99cce299325b0f0ce6445e63e13062d86fb38b2e92d08ba",
    "logs": [],
    "blockNumber": 8798156,
    "cumulativeGasUsed": "12412799",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE55308935438C3FBB997619146890eFF325313EC"
  ],
  "solcInputHash": "48c0b9c4bc9820bca42d5fbff55cba5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"frensStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_validatorLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_frensLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address,bool,bool,uint256,uint256,bytes32)\":{\"details\":\"creates a new pool\",\"returns\":{\"_0\":\"address of new pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n///@title Frens Staking Pool Contract\\n///@author 0xWildhare and the FRENS team\\n///@dev A new instance of this contract is created everytime a user makes a new pool\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensOracle.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\nimport \\\"./interfaces/IFrensMerkleProver.sol\\\";\\n\\ncontract StakingPool is IStakingPool, Ownable{\\n    event Stake(address depositContractAddress, address caller);\\n    event DepositToPool(uint amount, address depositer, uint id);\\n\\n    modifier noZeroValueTxn() {\\n        require(msg.value > 0, \\\"must deposit ether\\\");\\n        _;\\n    }\\n\\n    modifier maxTotDep() {\\n        require(\\n            msg.value + totalDeposits <= 32 ether,\\n            \\\"total deposits cannot be more than 32 Eth\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier mustBeAccepting() {\\n        require(\\n            currentState == PoolState.acceptingDeposits,\\n            \\\"not accepting deposits\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier correctPoolOnly(uint _id) {\\n        require(\\n            frensPoolShare.poolByIds(_id) == address(this),\\n            \\\"wrong staking pool for id\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyIdOwner(uint _id) {\\n        require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n        _;\\n    }\\n\\n    modifier reentrancyGuard() {\\n        require(!entered, \\\"nope\\\");\\n        entered = true;\\n        _;\\n        entered = false;\\n    }\\n\\n    enum PoolState {\\n        awaitingValidatorInfo,\\n        acceptingDeposits,\\n        staked,\\n        exited\\n    }\\n    PoolState currentState;\\n\\n    struct RageQuit {\\n        uint price;\\n        uint time;\\n        bool rageQuitting;\\n    }\\n\\n     //maps the ID for each FrensPoolShare NFT in the pool to the deposit for that share\\n    mapping(uint => uint) public depositForId;\\n     //maps each ID to the rewards it has already claimed (used in calculating the claimable rewards)\\n    mapping(uint => uint) public frenPastClaim;\\n    //is the ID transfer-locked?\\n    mapping(uint => bool) public locked; //transfer locked (must use ragequit)\\n    //maps ID to the RageQuit struct\\n    mapping(uint => RageQuit) public rageQuitInfo;\\n    //for private pools where each address must be allow-listed, an address can only deposit (or claim their NFT) once\\n    mapping(address => bool) public hasClaimed;\\n\\n    //total eth deposited to pool by users (does not include attestation or block rewards)\\n    uint public totalDeposits;\\n    //total amount of rewards claimed from pool (used in calculating the claimable rewards)\\n    uint public totalClaims;\\n    //Maximum deposit allowed for a pool\\n    uint public poolMax;\\n    //minimum deposit for a pool\\n    uint public poolMin;\\n    //these are the ids which have deposits in this pool\\n    uint[] public idsInPool;\\n\\n    //this is set in the constructor and requires the validator public key and other validator info be set before deposits can be made\\n    //also, if the validator is locked, once set, the pool owner cnnot change the validator pubkey and other info\\n    bool public validatorLocked;\\n    //if true the NFTs associated with this pool are non-transferable, unless/until rageQuit is called\\n    bool public transferLocked;\\n    //set as true once the validator info has been set for the pool\\n    bool public validatorSet;\\n    //set as true if pool is deployed with a merkle root for the allow list\\n    bool public privatePool;\\n    //rageQuit reentrancy protection\\n    bool public entered;\\n\\n    //validator public key for pool\\n    bytes public pubKey;\\n    //validator withdrawal credentials - must be set to pool address\\n    bytes public withdrawal_credentials;\\n    //bls signature for validator\\n    bytes public signature;\\n    //deposit data root for validator\\n    bytes32 public deposit_data_root;\\n    //merkle root for privat pool\\n    bytes32 public merkleRoot;\\n\\n    IFrensPoolShare public frensPoolShare;\\n    IFrensArt public artForPool;\\n    IFrensStorage public frensStorage;\\n\\n    /**@dev when the pool is deploied by the factory, the owner, art contract, \\n    *storage contract, and if the validator is locked are all set. \\n    *The pool state is set according to whether or not the validator is locked.\\n    */\\n    constructor(\\n        address owner_,\\n        bool validatorLocked_,\\n        bool frensLocked_,\\n        uint poolMin_,\\n        uint poolMax_,\\n        bytes32 merkleRoot_,\\n        IFrensStorage frensStorage_\\n    ) {\\n        frensStorage = frensStorage_;\\n        artForPool = IFrensArt(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensArt\\\"))));\\n        frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n        validatorLocked = validatorLocked_;\\n        transferLocked = frensLocked_;\\n        poolMin = poolMin_;\\n        poolMax = poolMax_;\\n        if (validatorLocked) {\\n            currentState = PoolState.awaitingValidatorInfo;\\n        } else {\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        if(merkleRoot_ != bytes32(0)){\\n            merkleRoot = merkleRoot_;\\n            privatePool = true;\\n        }\\n        _transferOwnership(owner_);\\n    }\\n\\n    ///@notice This allows a user to deposit funds to the pool, and recieve an NFT representing their share\\n    ///@dev recieves funds and returns FrenspoolShare NFT\\n   function depositToPool(\\n        bytes32[] calldata merkleProof\\n    )\\n        external\\n        payable\\n        noZeroValueTxn\\n        mustBeAccepting\\n        maxTotDep\\n    {\\n        require(msg.value >= poolMin, \\\"below minimum deposit for pool\\\");\\n        require(msg.value <= poolMax, \\\"above maximum deposit for pool\\\");\\n        if(privatePool){\\n            require(!hasClaimed[msg.sender], \\\"you have already made your deposit\\\");\\n            IFrensMerkleProver frensMerkleProver = IFrensMerkleProver(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensMerkleProver\\\"))));\\n            frensMerkleProver.verify(merkleProof, merkleRoot, msg.sender);\\n            hasClaimed[msg.sender] = true;\\n        }\\n        uint id = frensPoolShare.totalSupply();\\n        depositForId[id] = msg.value;\\n        totalDeposits += msg.value;\\n        idsInPool.push(id);\\n        frenPastClaim[id] = 1; //this avoids future rounding errors in rewardclaims\\n        locked[id] = transferLocked;\\n        frensPoolShare.mint(msg.sender); //mint nft\\n        emit DepositToPool(msg.value, msg.sender, id);\\n    }\\n\\n    ///@notice allows a user to add funds to an existing NFT ID\\n    ///@dev recieves funds and increases deposit for a FrensPoolShare ID\\n    function addToDeposit(uint _id) \\n        external \\n        payable \\n        mustBeAccepting \\n        maxTotDep \\n        correctPoolOnly(_id)\\n    {\\n        require(frensPoolShare.exists(_id), \\\"id does not exist\\\"); //id must exist\\n        require(depositForId[_id] + msg.value <= poolMax, \\\"above maximum deposit for pool\\\");\\n        depositForId[_id] += msg.value;\\n        totalDeposits += msg.value;\\n    }\\n\\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\\n    ///@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\\n    function withdraw(uint _id, uint _amount) external mustBeAccepting correctPoolOnly(_id) onlyIdOwner(_id){\\n        require(depositForId[_id] >= poolMin + _amount, \\\"invalid amount, withdraw less or use withdrawAll\\\");\\n        _withdraw(_id, _amount);\\n    }\\n\\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\\n    /**@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\\n    *useful for pools that have a minimum deposit, where withdraw(id,amount) will not allow withdrawals that will put the deposit\\n    *below the minimum. Burns the NFT when done (so that addToDeposit cannot be used), but clears the hasClaimed bit, if they want to make a new deposit\\n    */\\n    function withdrawAll(uint _id) external mustBeAccepting correctPoolOnly(_id) onlyIdOwner(_id){\\n        _withdraw(_id, depositForId[_id]);\\n        hasClaimed[msg.sender] = false;\\n        frensPoolShare.burn(_id);\\n    }\\n\\n    function _withdraw(uint _id, uint _amount) internal {\\n        depositForId[_id] -= _amount;\\n        totalDeposits -= _amount;\\n        (bool success, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: _amount}(\\\"\\\");\\n        assert(success);\\n    }\\n\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract, accepts validator info\\n    function stake(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        //if validator info has previously been entered, check that it is the same, then stake\\n        if (validatorSet) {\\n            require(keccak256(_pubKey) == keccak256(pubKey), \\\"pubKey mismatch\\\");\\n        } else {\\n            //if validator info has not previously been entered, enter it, then stake\\n            _setPubKey(\\n                _pubKey,\\n                _withdrawal_credentials,\\n                _signature,\\n                _deposit_data_root\\n            );\\n        }\\n        _stake();\\n    }\\n\\n    function stake() external onlyOwner {\\n        _stake();\\n    }\\n\\n    function _stake() internal {\\n        require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n        require(totalDeposits == 32 ether, \\\"not enough deposits\\\");\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        require(validatorSet, \\\"validator not set\\\");\\n        \\n        address depositContractAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"DepositContract\\\")));\\n        currentState = PoolState.staked;\\n        IDepositContract(depositContractAddress).deposit{value: 32 ether}(\\n            pubKey,\\n            withdrawal_credentials,\\n            signature,\\n            deposit_data_root\\n        );\\n        emit Stake(depositContractAddress, msg.sender);\\n    }\\n\\n    ///@dev sets the validator info required when depositing to the deposit contract\\n    function setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        _setPubKey(\\n            _pubKey,\\n            _withdrawal_credentials,\\n            _signature,\\n            _deposit_data_root\\n        );\\n    }\\n\\n    function _setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) internal {\\n        //get expected withdrawal_credentials based on contract address\\n        bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n        //compare expected withdrawal_credentials to provided\\n        require(\\n            keccak256(_withdrawal_credentials) ==\\n                keccak256(withdrawalCredFromAddr),\\n            \\\"withdrawal credential mismatch\\\"\\n        );\\n        if (validatorLocked) {\\n            require(currentState == PoolState.awaitingValidatorInfo, \\\"wrong state\\\");\\n            assert(!validatorSet); //this should never fail\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        pubKey = _pubKey;\\n        withdrawal_credentials = _withdrawal_credentials;\\n        signature = _signature;\\n        deposit_data_root = _deposit_data_root;\\n        validatorSet = true;\\n    }\\n\\n    ///@notice allows user to claim their portion of the rewards\\n    ///@dev calculates the rewards due to `_id` and sends them to the owner of `_id`\\n    function claim(uint _id) external correctPoolOnly(_id){\\n        require(\\n            currentState != PoolState.acceptingDeposits,\\n            \\\"use withdraw when not staked\\\"\\n        );\\n        require(\\n            address(this).balance > 100,\\n            \\\"must be greater than 100 wei to claim\\\"\\n        );\\n        //has the validator exited?\\n        bool exited;\\n        if (currentState != PoolState.exited) {\\n            IFrensOracle frensOracle = IFrensOracle(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensOracle\\\"))));\\n            exited = frensOracle.checkValidatorState(address(this));\\n        } else exited = true;\\n        //get share for id\\n        uint amount = _getShare(_id);\\n        //claim\\n        frenPastClaim[_id] += amount;\\n        totalClaims += amount;\\n        //fee? not applied to exited\\n        uint feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\")));\\n        if (feePercent > 0 && !exited) {\\n            address feeRecipient = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"protocol.fee.recipient\\\")));\\n            uint feeAmount = (feePercent * amount) / 100;\\n            if (feeAmount > 1){ \\n                (bool success1, /*return data*/) = feeRecipient.call{value: feeAmount - 1}(\\\"\\\"); //-1 wei to avoid rounding error issues\\n                assert(success1);\\n            }\\n            amount = amount - feeAmount;\\n        }\\n        (bool success2, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: amount}(\\\"\\\");\\n        assert(success2);\\n    }\\n\\n    ///@dev this marks the pool as exited, but does not affect the functionality of amy methods, except that an exited pool no longer extracts fees\\n    function exitPool() external {\\n        require(msg.sender == address(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensOracle\\\")))), \\\"must be called by oracle\\\");\\n        currentState = PoolState.exited;\\n    }\\n    \\n    ///@dev for transferlocked NFTs, if the owner wants to sell, they must allow the other members of the pool a chance to buy them out before the NFT is unlocked\\n    function rageQuit(uint _id, uint _price) \\n        public onlyIdOwner(_id) \\n        correctPoolOnly(_id)\\n    {\\n        require(locked[_id], \\\"no reason to rageQuit an unlocked share\\\");\\n        uint deposit = depositForId[_id];\\n        require(_price <= deposit, \\\"cannot set price higher than deposit\\\");\\n        RageQuit storage newQuit = rageQuitInfo[_id];\\n        newQuit.price = _price;\\n        newQuit.time =  block.timestamp;\\n        newQuit.rageQuitting = true;\\n    }\\n  \\n    ///@dev once an NFT owner in a transfer locked pool calls rage quir, the other members of the pool have 1 week to buy them out, or the NFT unlocks\\n    function buyOut(\\n        uint rageQuitId, \\n        uint buyersTokenId\\n    ) \\n        public\\n        payable\\n        onlyIdOwner(buyersTokenId) \\n        correctPoolOnly(buyersTokenId) \\n        correctPoolOnly(rageQuitId)\\n        reentrancyGuard\\n    {\\n        require(rageQuitInfo[rageQuitId].rageQuitting, \\\"must be rage quitting\\\");\\n        require(msg.value >= rageQuitInfo[rageQuitId].price, \\\"must send correct value\\\");\\n        address rageOwner = frensPoolShare.ownerOf(rageQuitId);\\n        (bool success, /*return data*/) = rageOwner.call{value: msg.value}(\\\"\\\");\\n        assert(success);\\n        locked[rageQuitId] = false;\\n        frensPoolShare.safeTransferFrom(\\n            rageOwner,\\n            msg.sender,\\n            rageQuitId\\n        );\\n        locked[rageQuitId] = true;\\n        rageQuitInfo[rageQuitId].rageQuitting = false;\\n    }\\n\\n    ///@dev once a week has elapsed after initiating the rageQuit, the NFT owner can unlock the NFT and sell it on the open market.\\n    function unlockTransfer(uint _id) public reentrancyGuard{\\n        uint endTime = rageQuitInfo[_id].time + 1 weeks;\\n        require(endTime <= block.timestamp, \\\"allow one week before unlock\\\");\\n        locked[_id] = false;\\n        rageQuitInfo[_id].rageQuitting = false;\\n    }\\n\\n  \\n    //getters\\n\\n    function getIdsInThisPool() public view returns(uint[] memory) {\\n      return idsInPool;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id`\\n    function getShare(uint _id) public view correctPoolOnly(_id) returns (uint) {\\n        return _getShare(_id);\\n    }\\n\\n    function _getShare(uint _id) internal view returns (uint) {\\n        if (address(this).balance == 0) return 0;\\n        uint frenDep = depositForId[_id];\\n        uint frenPastClaims = frenPastClaim[_id];\\n        uint totFrenRewards = ((frenDep * (address(this).balance + totalClaims)) / totalDeposits);\\n        if (totFrenRewards == 0) return 0;\\n        uint amount = totFrenRewards - frenPastClaims;\\n        return amount;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\\n    ///@dev this is used for the traits in the NFT\\n    function getDistributableShare(uint _id) public view returns (uint) {\\n        if (currentState == PoolState.acceptingDeposits) {\\n            return 0;\\n        } else {\\n            uint share = _getShare(_id);\\n            uint feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\")));\\n            if (feePercent > 0 && currentState != PoolState.exited) {\\n                uint feeAmount = (feePercent * share) / 100;\\n                share = share - feeAmount;\\n            }\\n            return share;\\n        }\\n    }\\n\\n    ///@return pool state\\n    function getState() public view returns (string memory) {\\n        if (currentState == PoolState.awaitingValidatorInfo)\\n            return \\\"awaiting validator info\\\";\\n        if (currentState == PoolState.staked) return \\\"staked\\\";\\n        if (currentState == PoolState.acceptingDeposits)\\n            return \\\"accepting deposits\\\";\\n        if (currentState == PoolState.exited) return \\\"exited\\\";\\n        return \\\"state failure\\\"; //should never happen\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakingPool, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n        uint uintFromAddress = uint256(uint160(a));\\n        bytes memory withdralDesired = abi.encodePacked(\\n            uintFromAddress +\\n                0x0100000000000000000000000000000000000000000000000000000000000000\\n        );\\n        return withdralDesired;\\n    }\\n\\n    ///@dev allows pool owner to change the art for the NFTs in the pool\\n    function setArt(IFrensArt newArtContract) external onlyOwner {\\n        IFrensArt newFrensArt = newArtContract;\\n        string memory newArt = newFrensArt.renderTokenById(1);\\n        require(bytes(newArt).length != 0, \\\"invalid art contract\\\");\\n        artForPool = newArtContract;\\n    }\\n\\n    // to support receiving ETH by default\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x51f3886b428ccc4822f7076ba41e5c65a1bcf0c0923d70b3b5f3787728de548e\",\"license\":\"MIT\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n///@title Frens Staking Pool Factory\\n///@author 0xWildhare and Frens team\\n///@dev allows user to create a new staking pool\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ncontract StakingPoolFactory is IStakingPoolFactory{\\n    event Create(\\n        address indexed contractAddress,\\n        address creator,\\n        address owner\\n    );\\n\\n    IFrensPoolShare frensPoolShare;\\n    IFrensStorage frensStorage;\\n\\n    constructor(IFrensStorage frensStorage_) {\\n       frensStorage = frensStorage_;\\n       frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n    }\\n\\n    ///@dev creates a new pool\\n    ///@return address of new pool\\n    function create(\\n        address _owner,\\n        bool _validatorLocked,\\n        bool _frensLocked, \\n        uint _poolMin,\\n        uint _poolMax,\\n        bytes32 _merkleRoot\\n    )\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        StakingPool stakingPool = new StakingPool(\\n            _owner,\\n            _validatorLocked,\\n            _frensLocked,\\n            _poolMin,\\n            _poolMax,\\n            _merkleRoot,\\n            frensStorage\\n        );\\n        // allow this stakingpool to mint shares in our NFT contract\\n        IAccessControl(address(frensPoolShare)).grantRole(keccak256(\\\"MINTER_ROLE\\\"),address(stakingPool));\\n        emit Create(address(stakingPool), msg.sender, address(this));\\n        return (address(stakingPool));\\n    }\\n}\\n\",\"keccak256\":\"0xfe650f8f752b71dece82ec2d02f66dc2eba22455950d05af852513d539e1c48d\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    function get_deposit_count() external view returns (bytes memory);\\n\\n}\\n\",\"keccak256\":\"0x7590a7c7c977852560b0f2373e71ad175d1aa15d320d1238b2fe64e4cd1902f7\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensArt.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensArt {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfdb4c36608a20ac7f10ccb1b5d59ec26b25587860fb596dc12414b27591db2a0\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensMerkleProver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IFrensMerkleProver{\\n\\n    function verify(bytes32[] calldata merkleProof, bytes32 merkleRoot, address sender) external;\\n    \\n}\",\"keccak256\":\"0x887858c9c2b76715c271d97fd493b4740d6e580130d7502d4a61b23b567c218d\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensOracle.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IFrensOracle {\\n\\n   function checkValidatorState(address pool) external returns(bool);\\n\\n   function setExiting(bytes memory pubKey, bool isExiting) external;\\n\\n}\",\"keccak256\":\"0xdf2291434faca3e9976a42d2328a4347ced5978b29477e40eb75642185afdf67\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  \\n  function poolByIds(uint _id) external view returns(address);\\n\\n  function mint(address userAddress) external;\\n\\n  function burn(uint tokenId) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0x39505e8b566da73b07b6f11e72e17e8fe4f195b371bc38e8d6aa7c83044a6456\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n   \\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n    function burnKeys() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getBool(bytes32 _key) external view returns (bool);   \\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setBool(bytes32 _key, bool _value) external;    \\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;    \\n\\n    // Arithmetic \\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    \\n}\\n\",\"keccak256\":\"0x426ac9a703a13d4127b56886421d55a8380292dadfb2693d2e8373316075f220\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPool {\\n\\n    function pubKey() external view returns(bytes memory);\\n\\n    function depositForId(uint _id) external view returns (uint);\\n\\n    function totalDeposits() external view returns(uint);\\n\\n    function transferLocked() external view returns(bool);\\n\\n    function locked(uint id) external view returns(bool);\\n\\n    function artForPool() external view returns (IFrensArt);\\n\\n    function owner() external view returns (address);\\n\\n    function depositToPool(bytes32[] calldata) external payable;\\n\\n    function addToDeposit(uint _id) external payable;\\n\\n    function withdraw(uint _id, uint _amount) external;\\n\\n    function claim(uint id) external;\\n\\n    function getIdsInThisPool() external view returns(uint[] memory);\\n\\n    function getShare(uint _id) external view returns (uint);\\n\\n    function getDistributableShare(uint _id) external view returns (uint);\\n\\n    function rageQuit(uint _id, uint _price) external;\\n  \\n    function buyOut(uint rageQuitId, uint buyersTokenId) external payable; \\n\\n    function unlockTransfer(uint _id) external;\\n\\n    function rageQuitInfo(uint id) external view returns(uint, uint, bool);\\n\\n    //function burn(uint tokenId) external;\\n\\n    function setPubKey(\\n        bytes calldata pubKey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function getState() external view returns (string memory);\\n\\n    // function getDepositAmount(uint _id) external view returns(uint);\\n\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function stake() external;\\n\\n    function exitPool() external;\\n}\\n\",\"keccak256\":\"0x1d3033a6da07bcaa2088066420a4b67dbedb07921eba0c04e93de1b9fa8ed83e\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPoolFactory {\\n\\n  function create(\\n    address _owner, \\n    bool _validatorLocked, \\n    bool frensLocked,\\n    uint poolMin,\\n    uint poolMax,\\n    bytes32 merkleRoot\\n   ) external returns(address);\\n\\n}\\n\",\"keccak256\":\"0x0971fe4d4ae9a17ed258a7bc5a61393bd931fee5ce3fb20501ba5c43a39f2796\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604090808252346101535780613ad8803803809161001f8285610158565b833960209283918101031261015357516001600160a01b0380821692909183900361015357600180546001600160a01b0319908116851790915584516f636f6e74726163742e6164647265737360801b8382019081526d4672656e73506f6f6c536861726560901b6030830152601e825291949092838701929091906001600160401b0384118585101761013d5760248484938193828c52885190206321f8a72160e01b835260448901525afa928315610132576000936100f5575b505050169060005416176000555161395c908161017c8239f35b813d831161012b575b6101088185610158565b81010312610127575190828216820361012457503880806100db565b80fd5b5080fd5b503d6100fe565b86513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761013d5760405256fe6080604090808252600436101561001557600080fd5b600091823560e01c635445c1711461002c57600080fd5b3461019c5760c036600319011261019c576001600160a01b039160043583811691908290036101c657602435918215158093036101c2576044358015158091036101be5785600154169061375c948585019367ffffffffffffffff96868610888711176101aa579286959260e095928c9998956101cb873984526020840152888301526064356060830152608435608083015260a43560a083015260c082015203019083f09384156101a05780835416941693803b1561019c5782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101925761016b575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b811161017e576020935081523880610133565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b8b52604160045260248bfd5b8680fd5b8580fd5b8480fdfe6080604081815234620002d35760e0826200375c80380380916200002482856200030a565b833981010312620002d3576200003a826200032e565b6020926200004a84820162000343565b6200005784830162000343565b9060608301519160808401519660c060a08601519501519060018060a01b0390818316809303620002d3576200008d3362000351565b60018060a01b0319928084601354161760135589518281016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000dd81620002d8565b519020908b516321f8a72160e01b9283825260048201528481602481875afa908115620002c8578593929187916000916200027f575b509060249291168860125416176012558d518481019182526d4672656e73506f6f6c536861726560901b6030820152601e81526200015181620002d8565b519020918d519485938492835260048301525afa91821562000274576000926200021c575b50509161ff00959391620001d8999a95931690601154161760115560ff600b5492151516948591151560081b169161ffff19161717600b5560095560085560001462000203576000805460ff60a01b191690555b80620001e6575b5062000351565b516133be90816200039e8239f35b601055630100000063ff00000019600b541617600b5538620001d1565b6000805460ff60a01b1916600160a01b179055620001ca565b81819392933d83116200026c575b6200023681836200030a565b810103126200026957509161ff0095939162000259620001d89a9b96946200032e565b9193959a99819395975062000176565b80fd5b503d6200022a565b8a513d6000823e3d90fd5b85819495969293503d8311620002c0575b6200029c81836200030a565b8101031262000269575084929186620002b76024936200032e565b90919262000113565b503d62000290565b8d513d6000823e3d90fd5b600080fd5b604081019081106001600160401b03821117620002f457604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017620002f457604052565b51906001600160a01b0382168203620002d357565b51908115158203620002d357565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816312686aae1461216e575080631865c57d1461213d578063299179541461203b5780632cf2cd48146120145780632daad61d14611fed5780632eb4a7ab14611fce57806330dbf88714611fa5578063379607f514611b205780633a4b66f114611b0657806341c6138314611ae7578063441a3e701461198957806345b58fe4146118d65780634b2b4e361461179057806351ff4847146116cf578063591167c7146116a657806359b5e75e1461167f578063678e300a1461165f578063715018a61461160257806373b2e80e146115c45780637d882097146115a55780638620891c1461142a578063888e9cf8146113dd5780638ae578fd146113b45780638da5cb5b1461138c5780639426e22614611365578063958e2d31146111de578063a77f05e9146111b9578063ac2a5dfd14611120578063b45a3c0e146110f4578063b4bc91bc14610c15578063be8587981461092c578063bed62f3514610850578063cd8df8a614610831578063cfb5a5f8146107a0578063e2d9ae3e14610781578063e3f05d831461075d578063e4a5027614610682578063e6b1a3ae14610541578063e920eec014610517578063f038afe31461033b578063f2fde38b14610269578063f8f306e1146102465763fc03bad203610011573461024257602036600319011261024257606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b5050346102655781600319360112610265576020906009549051908152f35b5080fd5b5034610242576020366003190112610242576001600160a01b03813581811692908390036103375761029961232a565b82156102e5575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b50346102425761034a366121da565b60115484516331a9108f60e11b815280850184905291939260209290916001600160a01b03908116918481602481865afa92831561050d5761039b8360249588948d916104f0575b50163314612517565b885193848092631dc82a7560e01b8252878a8301525afa9081156104e6576103cd9289926104b7575b501630146124b3565b8086526003825260ff85872054161561046457808652600182528486205484116104155790600293929186525282842090815542600182015501600160ff1982541617905551f35b845162461bcd60e51b81528084018390526024808201527f63616e6e6f742073657420707269636520686967686572207468616e206465706044820152631bdcda5d60e21b6064820152608490fd5b845162461bcd60e51b8152808401839052602760248201527f6e6f20726561736f6e20746f20726167655175697420616e20756e6c6f636b656044820152666420736861726560c81b6064820152608490fd5b6104d8919250853d87116104df575b6104d08183612308565b810190612494565b90386103c4565b503d6104c6565b87513d8a823e3d90fd5b6105079150853d87116104df576104d08183612308565b38610392565b88513d8b823e3d90fd5b5050346102655761053e61052a3661221e565b9561053995919594929461232a565b612b77565b51f35b5034610242576020908160031936011261067e5780356001600160a01b03811692908390036103375761057261232a565b835163516b636d60e11b81526001838201528581602481875afa9081156106745786916105f7575b5051156105be5750506bffffffffffffffffffffffff60a01b601254161760125551f35b835162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e6106088183612308565b81019082818303126106705780519067ffffffffffffffff821161066c570181601f8201121561067057805161063d81612560565b9261064a88519485612308565b81845284828401011161066c5761066691848085019101612192565b3861059a565b8780fd5b8680fd5b85513d88823e3d90fd5b8380fd5b82843461075a578060031936011261075a57508051600091600d546106a681612288565b8084529060019081811690811561073257506001146106e7575b50506106d1826106e3940383612308565b519182916020835260208301906121b5565b0390f35b600d600090815294506000805160206133698339815191525b82861061071a57505050918101602001916106d1826106c0565b80546020878701810191909152909501948101610700565b6106e3965085925060209150926106d19360ff191682840152151560051b82010194506106c0565b80fd5b50503461026557816003193601126102655760209060ff600b541690519015158152f35b505034610265578160031936011261026557602090600f549051908152f35b5034610242576020366003190112610242576011548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa91821561082757916108039161080894936020979261080f57501630146124b3565b61308f565b9051908152f35b6104d8919250873d81116104df576104d08183612308565b84513d87823e3d90fd5b5050346102655781600319360112610265576020906008549051908152f35b50346102425760208060031936011261067e57600b5491803561087884841c60ff161561305d565b64010000000064ff000000001980951617600b558086528183526001858720015462093a8081018091116109195742106108d7578552600382528385209160ff199283815416905552600283852001908154169055600b5416600b5551f35b5060649184519162461bcd60e51b8352820152601c60248201527f616c6c6f77206f6e65207765656b206265666f726520756e6c6f636b000000006044820152fd5b634e487b7160e01b875260118352602487fd5b50610936366121da565b60115484516331a9108f60e11b808252818601849052946001600160a01b0394909360209391926024928716919085818581865afa908115610bf4576109879189918d91610bfe5750163314612517565b8851631dc82a7560e01b918282528782015285818581865afa8015610bf4576109bb918c91610bd7575b50881630146124b3565b8851908152838682015284818481855afa8015610bcd576109e7918b91610bb0575b50871630146124b3565b600b54966109fa60ff89871c161561305d565b64ff000000001997881664010000000017600b55838a52858552888a206002015460ff1615610b7657838a52858552888a20543410610b3457908483928b948b51809481938252888b8301525afa908115610b2a578391610b0d575b50610a718380808c5134865af1610a6b61257c565b506125ac565b838352600385528883209660ff19978881541690558060115416803b15610337578492836064928d519687958694632142170760e11b8652168c85015233908401528860448401525af18015610b0357610aef575b50526003815284862060018482541617905552600283852001908154169055600b5416600b5551f35b610af8906122c2565b610670578638610ac6565b88513d84823e3d90fd5b610b249150853d87116104df576104d08183612308565b38610a56565b89513d85823e3d90fd5b885162461bcd60e51b81528087018690526017818501527f6d7573742073656e6420636f72726563742076616c75650000000000000000006044820152606490fd5b885162461bcd60e51b8152808701869052601581850152746d7573742062652072616765207175697474696e6760581b6044820152606490fd5b610bc79150863d88116104df576104d08183612308565b386109dd565b89513d8c823e3d90fd5b610bee9150873d89116104df576104d08183612308565b386109b1565b8a513d8d823e3d90fd5b6105079150883d8a116104df576104d08183612308565b5091906020806003193601126102425767ffffffffffffffff93803585811161033757366023820112156103375780820135868111610fc7578060051b6024923684838301011161066c5734156110bd5760ff885460a01c16858110156110ab576001610c829114612382565b610ca26801bc16d674ec800000610c9b600654346123c7565b11156123ea565b600954341061106957610cb9600854341115612448565b60ff600b5460181c16610e85575b5050509080929394955060018060a01b038481601154168751958680926318160ddd60e01b82525afa938415610e7b578794610e47575b50838752600185523486882055610d17346006546123c7565b600655600a5468010000000000000000811015610e35576001810180600a55811015610e2157908488949392600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801558484526002865260018785205560ff600b5460081c16600387528785209060ff80198354169115151617905560115416803b1561067e5783928392885194859384926335313c2160e11b845233908401525af18015610e1757610e03575b50507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc91606091845191348352339083015284820152a151f35b610e0c906122c2565b61067e578338610dc9565b85513d84823e3d90fd5b83603284634e487b7160e01b600052526000fd5b634e487b7160e01b8852604183528388fd5b9093508481813d8311610e74575b610e5f8183612308565b81010312610e6f57519238610cfe565b600080fd5b503d610e55565b86513d89823e3d90fd5b3388526005865260ff878920541661101c5760135487516f636f6e74726163742e6164647265737360801b88820190815270233932b739a6b2b935b632a83937bb32b960791b6030830152602182526001600160a01b039283169b60608301919082118383101761100857988188818e9f8e9f9b9c9d859f839052875190206321f8a72160e01b835260648801525afa918215610ffe578792610fcb575b50501660105491813b15610fc757895163879c84e960e01b815260608982015260648101869052946001600160fb1b0310610fc7578560848686819684988c849701858501378b83015233604483015281010301925af18015610fbd57610fa9575b505033855260058352838520805460ff191660011790558493929190388080610cc7565b610fb2906122c2565b610337578438610f85565b86513d84823e3d90fd5b8580fd5b610fef92506060908b903d8d11610ff6575b610fe78285612308565b010190612494565b3880610f23565b3d9150610fdd565b8b513d89823e3d90fd5b8760418a634e487b7160e01b600052526000fd5b865162461bcd60e51b81528086018790526022818601527f796f75206861766520616c7265616479206d61646520796f7572206465706f736044820152611a5d60f21b6064820152608490fd5b865162461bcd60e51b8152808601879052601e818601527f62656c6f77206d696e696d756d206465706f73697420666f7220706f6f6c00006044820152606490fd5b634e487b7160e01b8952602186528489fd5b865162461bcd60e51b81528086018790526012818601527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152606490fd5b5034610242576020366003190112610242578160209360ff923581526003855220541690519015158152f35b82843461075a578060031936011261075a57508051600091600c5461114481612288565b80845290600190818116908115610732575060011461116e5750506106d1826106e3940383612308565b600c600090815294506000805160206133298339815191525b8286106111a157505050918101602001916106d1826106c0565b80546020878701810191909152909501948101611187565b505034610265578160031936011261026557600b549051602091821c60ff1615158152f35b50829034610265576020806003193601126102425781359060ff845460a01c16838110156113525760016112129114612382565b6011548551631dc82a7560e01b81528481018490526001600160a01b0392918316908281602481855afa908115611348579161125d84926024948a9161132b575b50861630146124b3565b8851928380926331a9108f60e11b8252888a8301525afa9081156113215783600593926112939289916113045750163314612517565b838652600181526112a787872054856125c9565b33865252848420805460ff191690556011541691823b1561067e5790602484928387519586948593630852cd8d60e31b85528401525af180156112fa576112ed57509051f35b6112f6906122c2565b9051f35b83513d84823e3d90fd5b61131b9150843d86116104df576104d08183612308565b8a610392565b87513d88823e3d90fd5b6113429150843d86116104df576104d08183612308565b8b611253565b88513d89823e3d90fd5b634e487b7160e01b855260218452602485fd5b50503461026557816003193601126102655760209060ff600b5460101c1690519015158152f35b505034610265578160031936011261026557905490516001600160a01b039091168152602090f35b50503461026557816003193601126102655760125490516001600160a01b039091168152602090f35b50346102425760203660031901126102425735600a5481101561024257600a602093527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801549051908152f35b506020908160031936011261067e5780359060ff855460a01c16818110156115925760016114589114612382565b6114716801bc16d674ec800000610c9b600654346123c7565b6011548451631dc82a7560e01b8152828101849052906001600160a01b039081168583602481845afa9283156104e65760249387936114b9928b926104b757501630146124b3565b865192838092634f558e7960e01b825287878301525afa908115610674578691611565575b501561152e5750908160019285528282526115096114ff34868820546123c7565b6008541015612448565b84525280822061151a3482546123c7565b9055611528346006546123c7565b60065551f35b835162461bcd60e51b815290810183905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b6115859150843d861161158b575b61157d8183612308565b8101906124ff565b386114de565b503d611573565b634e487b7160e01b865260218252602486fd5b5050346102655781600319360112610265576020906006549051908152f35b503461024257602036600319011261024257356001600160a01b0381169081900361024257818360ff92602095526005855220541690519015158152f35b50503461026557816003193601126102655761161c61232a565b81546001600160a01b03198116835590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50913461075a57602036600319011261075a575061080860209235613102565b50503461026557816003193601126102655760209060ff600b5460181c1690519015158152f35b50503461026557816003193601126102655760115490516001600160a01b039091168152602090f35b50503461026557816003193601126102655780519082600e546116f181612288565b80855291600191808316908115611768575060011461171d575b5050506106d1826106e3940383612308565b9450600e85526000805160206133498339815191525b828610611750575050506106d18260206106e3958201019461170b565b80546020878701810191909152909501948101611733565b6106e39750869350602092506106d194915060ff191682840152151560051b8201019461170b565b50346102425761179f3661221e565b926117b0979695949792919261232a565b600b5460101c60ff16156118c257505050506117cf9293503691612674565b80516020918201208351600c549086816117e884612288565b91828252868201946001908882821691826000146118a457505060011461185c575b5061181792500382612308565b5190200361182a5750505b61053e6126e5565b606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b600c8b528791508a906000805160206133298339815191525b85831061188c57505061181793508201013861180a565b80548388018501528694508993909201918101611875565b60ff1916885261181795151560051b850101925038915061180a9050565b929550926118d1969194612b77565b611822565b82843461075a578060031936011261075a57908051918290600a549182855260208095018093600a84527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890845b818110611975575050508161193a910382612308565b83519485948186019282875251809352850193925b82811061195e57505050500390f35b83518552869550938101939281019260010161194f565b825484529288019260019283019201611924565b503461024257611998366121da565b9160ff855460a01c16818110156115925760016119b59114612382565b6011548451631dc82a7560e01b81528281018490526020916001600160a01b039081168383602481845afa90811561050d57611a0085926024958c91611aca575b50841630146124b3565b8851938480926331a9108f60e11b825289898301525afa80156104e657611a30928991611ab35750163314612517565b8286526001815284862054611a47856009546123c7565b11611a585750509061053e916125c9565b845162461bcd60e51b815291820152603060248201527f696e76616c696420616d6f756e742c207769746864726177206c657373206f7260448201526f081d5cd9481dda5d1a191c985dd05b1b60821b606482015260849150fd5b6105079150843d86116104df576104d08183612308565b611ae19150843d86116104df576104d08183612308565b386119f6565b5050346102655781600319360112610265576020906007549051908152f35b50503461026557816003193601126102655761182261232a565b509190346102655760209283600319360112610242576011548251631dc82a7560e01b815282358184018190526024966001600160a01b039493909290839082908a90829089165afa908115610e7b5790611b86918891611f88575b50851630146124b3565b60ff865460a01c1683811015611f765760018114611f34576064471115611ee457600314611edc578360135416828651818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b8152611bf1816122ec565b519020898851809481936321f8a72160e01b8352898301525afa908115610e7b578589899386938591611ebf575b50895163404df7b160e11b815230898201529485938492165af1908115610e7b578791611ea2575b50935b611c538261308f565b9482885260028452868820611c698782546123c7565b9055611c77866007546123c7565b600755816013541690875185810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b825260148152611cad816122ec565b5190209088519163bd02d0f560e01b83528783015285828c81865afa918215610bcd578a92611e6f575b508115159081611e66575b50611d5b575b50509086978392601198969798541694885195869384926331a9108f60e11b84528301525afa8015611d515761053e94849384938493611d32575b50508651915af1610a6b61257c565b611d49929350803d106104df576104d08183612308565b903880611d23565b85513d85823e3d90fd5b8488979293975181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b825260168152611d8f816122ec565b5190208b8a51809681936321f8a72160e01b83528b8301525afa92831561050d578993611e3e575b50611dc48260649261304a565b049160018311611def575b5097611de2849392899a99979899612553565b9597969192819950611ce8565b6000198301838111611e2c5792899a92611e1d8b8080611de2968e9f9d9e998c9b9a51915af1610a6b61257c565b929a5092935097969597611dcf565b634e487b7160e01b8a52601187528a8afd5b606491935082611e5d611dc492883d8a116104df576104d08183612308565b94925050611db7565b90501538611ce2565b9091508581813d8311611e9b575b611e878183612308565b81010312611e9757519038611cd7565b8980fd5b503d611e7d565b611eb99150833d851161158b5761157d8183612308565b38611c47565b611ed69150843d86116104df576104d08183612308565b38611c1f565b600193611c4a565b855162461bcd60e51b81528085018490526025818a01527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152808501849052601c818a01527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602184528787fd5b611f9f9150843d86116104df576104d08183612308565b38611b7c565b50503461026557816003193601126102655760135490516001600160a01b039091168152602090f35b5050346102655781600319360112610265576020906010549051908152f35b50346102425760203660031901126102425760209282913581526001845220549051908152f35b50346102425760203660031901126102425760209282913581526002845220549051908152f35b503461024257826003193601126102425760018060a01b03806013541660208451818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b8152612097816122ec565b51902060248651809481936321f8a72160e01b8352888301525afa90811561082757859161211f575b501633036120dd5750815460ff60a01b1916600360a01b17825551f35b6020606492519162461bcd60e51b8352820152601860248201527f6d7573742062652063616c6c6564206279206f7261636c6500000000000000006044820152fd5b612137915060203d81116104df576104d08183612308565b386120c0565b5050346102655781600319360112610265576106e39061215b613222565b90519182916020835260208301906121b5565b84903461026557816003193601126102655760209060ff600b5460081c1615158152f35b60005b8381106121a55750506000910152565b8181015183820152602001612195565b906020916121ce81518092818552858086019101612192565b601f01601f1916010190565b6040906003190112610e6f576004359060243590565b9181601f84011215610e6f5782359167ffffffffffffffff8311610e6f5760208381860195010111610e6f57565b906080600319830112610e6f5767ffffffffffffffff600435818111610e6f578361224b916004016121f0565b93909392602435838111610e6f5782612266916004016121f0565b93909392604435918211610e6f57612280916004016121f0565b909160643590565b90600182811c921680156122b8575b60208310146122a257565b634e487b7160e01b600052602260045260246000fd5b91607f1691612297565b67ffffffffffffffff81116122d657604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176122d657604052565b90601f8019910116810190811067ffffffffffffffff8211176122d657604052565b6000546001600160a01b0316330361233e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561238957565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116123d457565b634e487b7160e01b600052601160045260246000fd5b156123f157565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b1561244f57565b60405162461bcd60e51b815260206004820152601e60248201527f61626f7665206d6178696d756d206465706f73697420666f7220706f6f6c00006044820152606490fd5b90816020910312610e6f57516001600160a01b0381168103610e6f5790565b156124ba57565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b90816020910312610e6f57518015158103610e6f5790565b1561251e57565b60405162461bcd60e51b815260206004820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b919082039182116123d457565b67ffffffffffffffff81116122d657601f01601f191660200190565b3d156125a7573d9061258d82612560565b9161259b6040519384612308565b82523d6000602084013e565b606090565b156125b357565b634e487b7160e01b600052600160045260246000fd5b6000918183526001602052604083206125e3828254612553565b90556125f181600654612553565b6006556011546040516331a9108f60e11b81526004810193909352602090839060249082906001600160a01b03165afa918215612669579280928192612647958392612649575b50604051915af1610a6b61257c565b565b61266291925060203d81116104df576104d08183612308565b9038612638565b6040513d85823e3d90fd5b92919261268082612560565b9161268e6040519384612308565b829481845281830111610e6f578281602093846000960137010152565b156126b257565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec80000090814710612b41578160065403612b0657600080549260ff8460a01c169360049485811015612af35761272560018092146126ab565b60ff600b5460101c1615612abb5760018060a01b039384601354166040958651602095868201937f65787465726e616c2e636f6e74726163742e616464726573730000000000000085526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603984015260288352606083019067ffffffffffffffff9584831087841117612aa757828c52845190206321f8a72160e01b835260648501528890829060249082905afa928315612a9d578693612a79575b505060ff60a01b1916600160a11b178455600f54911695863b1561067e5790839188519586926304512a2360e31b845260808d8501528491600c5461281881612288565b908160848801528281169081600014612a5b5750600114612a10575b5060031985840381016024870152600d54879461285082612288565b918282528d85821691826000146129f15750506001146129a8575b50508584030160448601528592600e549161288583612288565b92838352878d83831692836000146129875750505060011461293b575b5050508391829160648301520391895af18015610fbd576128f2575b5050507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293945082519182523390820152a1565b821161292857507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce1929495508352849338806128be565b634e487b7160e01b815260418752602490fd5b918b939450600e88526000805160206133498339815191529288935b82851061296c575050500101908084806128a2565b80548486018701528b99508c98508d95909401938101612957565b60ff19168582015294151560051b90930190930194508392508190506128a2565b8c929550600d89526000805160206133698339815191529189925b8184106129d6575050010192388061286b565b80548385018601528c9a508d99508e949093019285016129c3565b60ff19168382015292151560051b90910190910194503890508061286b565b600c875290925085908a6000805160206133298339815191525b828410612a4057505050840160a4019138612834565b80548c850160a401528a98508b97509201918b908501612a2a565b905060a492945060ff191682870152151560051b8501019138612834565b612a9592935060609089903d8b11610ff657610fe78285612308565b9038806127d4565b8a513d88823e3d90fd5b50634e487b7160e01b875260418d52602487fd5b60405162461bcd60e51b815260208188015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b634e487b7160e01b845260218652602484fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b929094939194600160f81b3001908130116123d457604051602092838201908152838252612ba4826122ec565b612baf36868b612674565b848151910120915190200361300557600b5460ff8116612fab575b5060009260ff845460a01c16976004891015612f9757612bed6001809a146126ab565b67ffffffffffffffff92838111612f835780612c0a600c54612288565b98601f998a8111612f28575b5087908a8311600114612eb2578892612ea7575b5050600019600383901b1c1916908a1b17600c555b828211612e93578190612c53600d54612288565b888111612e38575b508590888311600114612dcb578692612dc0575b5050600019600383901b1c191690881b17600d555b8511612dac57612c95600e54612288565b848111612d5c575b5081938511600114612cea575091839491849394612cdf575b50501b916000199060031b1c191617600e555b600f556201000062ff000019600b541617600b55565b013592503880612cb6565b600e825260008051602061334983398151915293918591601f19831691905b88838310612d425750505010612d28575b505050811b01600e55612cc9565b0135600019600384901b60f8161c19169055388080612d1a565b868601358855909601959384019387935090810190612d09565b600e83526000805160206133498339815191528580880160051c820192848910612da3575b0160051c019087905b828110612d98575050612c9d565b848155018790612d8a565b92508192612d81565b634e487b7160e01b82526041600452602482fd5b013590503880612c6f565b600d87528a935060008051602061336983398151915291601f198416885b88828210612e225750508411612e08575b505050811b01600d55612c84565b0135600019600384901b60f8161c19169055388080612dfa565b8385013586558e97909501949283019201612de9565b909150600d86526000805160206133698339815191528880850160051c820192878610612e8a575b918c91869594930160051c01915b828110612e7c575050612c5b565b8881558594508c9101612e6e565b92508192612e60565b634e487b7160e01b85526041600452602485fd5b013590503880612c2a565b600c89528c935060008051602061332983398151915291601f1984168a5b8a828210612f095750508411612eef575b505050811b01600c55612c3f565b0135600019600384901b60f8161c19169055388080612ee1565b91929596849587849396013581550195019201908e9594939291612ed0565b909150600c88526000805160206133298339815191528a80850160051c820192898610612f7a575b918e91869594930160051c01915b828110612f6c575050612c16565b8a81558594508e9101612f5e565b92508192612f50565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526021600452602485fd5b6000549060ff8260a01c166004811015612fef57612fd991612fcf60ff92156126ab565b60101c16156125ac565b60ff60a01b1916600160a01b1760005538612bca565b634e487b7160e01b600052602160045260246000fd5b60405162461bcd60e51b815260048101839052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b80600019048211811515166123d4570290565b1561306457565b606460405162461bcd60e51b81526020600482015260046024820152636e6f706560e01b6044820152fd5b47156130fc5760009081526001602052604081205460026020526130c56040832054916130bf47600754906123c7565b9061304a565b6006549081156130e8570480156130e3576130e09250612553565b90565b505090565b634e487b7160e01b84526012600452602484fd5b50600090565b600060ff815460a01c1691600483101561320e57600183036131245750905090565b61312d9061308f565b9160018060a01b0360135416602060405181810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b825260148152613169816122ec565b51902060246040518094819363bd02d0f560e01b835260048301525afa9283156132025780936131cc575b505081151590816131c0575b506131a9575090565b9060646131b9826130e09461304a565b0490612553565b600391501415386131a0565b909192506020823d82116131fa575b816131e860209383612308565b8101031261075a575051903880613194565b3d91506131db565b604051903d90823e3d90fd5b634e487b7160e01b82526021600452602482fd5b60ff60005460a01c166004811015612fef5780156132ee57600281146132cb576001811461329c5760031461327a5760405161325d816122ec565b600d81526c7374617465206661696c75726560981b602082015290565b604051613286816122ec565b6006815265195e1a5d195960d21b602082015290565b506040516132a9816122ec565b6012815271616363657074696e67206465706f7369747360701b602082015290565b506040516132d8816122ec565b60068152651cdd185ad95960d21b602082015290565b506040516132fb816122ec565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fedf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7bb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fdd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5a26469706673582212209297bc0c836de5ae066679e122cbf72ec386edd70033edc7f9ade202d7ca181e64736f6c63430008100033a264697066735822122089a08d432138c20c316040cdd5de25ccd20e3268c31ac8d2a532199ee35eace964736f6c63430008100033",
  "deployedBytecode": "0x6080604090808252600436101561001557600080fd5b600091823560e01c635445c1711461002c57600080fd5b3461019c5760c036600319011261019c576001600160a01b039160043583811691908290036101c657602435918215158093036101c2576044358015158091036101be5785600154169061375c948585019367ffffffffffffffff96868610888711176101aa579286959260e095928c9998956101cb873984526020840152888301526064356060830152608435608083015260a43560a083015260c082015203019083f09384156101a05780835416941693803b1561019c5782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101925761016b575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b811161017e576020935081523880610133565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b8b52604160045260248bfd5b8680fd5b8580fd5b8480fdfe6080604081815234620002d35760e0826200375c80380380916200002482856200030a565b833981010312620002d3576200003a826200032e565b6020926200004a84820162000343565b6200005784830162000343565b9060608301519160808401519660c060a08601519501519060018060a01b0390818316809303620002d3576200008d3362000351565b60018060a01b0319928084601354161760135589518281016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000dd81620002d8565b519020908b516321f8a72160e01b9283825260048201528481602481875afa908115620002c8578593929187916000916200027f575b509060249291168860125416176012558d518481019182526d4672656e73506f6f6c536861726560901b6030820152601e81526200015181620002d8565b519020918d519485938492835260048301525afa91821562000274576000926200021c575b50509161ff00959391620001d8999a95931690601154161760115560ff600b5492151516948591151560081b169161ffff19161717600b5560095560085560001462000203576000805460ff60a01b191690555b80620001e6575b5062000351565b516133be90816200039e8239f35b601055630100000063ff00000019600b541617600b5538620001d1565b6000805460ff60a01b1916600160a01b179055620001ca565b81819392933d83116200026c575b6200023681836200030a565b810103126200026957509161ff0095939162000259620001d89a9b96946200032e565b9193959a99819395975062000176565b80fd5b503d6200022a565b8a513d6000823e3d90fd5b85819495969293503d8311620002c0575b6200029c81836200030a565b8101031262000269575084929186620002b76024936200032e565b90919262000113565b503d62000290565b8d513d6000823e3d90fd5b600080fd5b604081019081106001600160401b03821117620002f457604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017620002f457604052565b51906001600160a01b0382168203620002d357565b51908115158203620002d357565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816312686aae1461216e575080631865c57d1461213d578063299179541461203b5780632cf2cd48146120145780632daad61d14611fed5780632eb4a7ab14611fce57806330dbf88714611fa5578063379607f514611b205780633a4b66f114611b0657806341c6138314611ae7578063441a3e701461198957806345b58fe4146118d65780634b2b4e361461179057806351ff4847146116cf578063591167c7146116a657806359b5e75e1461167f578063678e300a1461165f578063715018a61461160257806373b2e80e146115c45780637d882097146115a55780638620891c1461142a578063888e9cf8146113dd5780638ae578fd146113b45780638da5cb5b1461138c5780639426e22614611365578063958e2d31146111de578063a77f05e9146111b9578063ac2a5dfd14611120578063b45a3c0e146110f4578063b4bc91bc14610c15578063be8587981461092c578063bed62f3514610850578063cd8df8a614610831578063cfb5a5f8146107a0578063e2d9ae3e14610781578063e3f05d831461075d578063e4a5027614610682578063e6b1a3ae14610541578063e920eec014610517578063f038afe31461033b578063f2fde38b14610269578063f8f306e1146102465763fc03bad203610011573461024257602036600319011261024257606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b5050346102655781600319360112610265576020906009549051908152f35b5080fd5b5034610242576020366003190112610242576001600160a01b03813581811692908390036103375761029961232a565b82156102e5575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b50346102425761034a366121da565b60115484516331a9108f60e11b815280850184905291939260209290916001600160a01b03908116918481602481865afa92831561050d5761039b8360249588948d916104f0575b50163314612517565b885193848092631dc82a7560e01b8252878a8301525afa9081156104e6576103cd9289926104b7575b501630146124b3565b8086526003825260ff85872054161561046457808652600182528486205484116104155790600293929186525282842090815542600182015501600160ff1982541617905551f35b845162461bcd60e51b81528084018390526024808201527f63616e6e6f742073657420707269636520686967686572207468616e206465706044820152631bdcda5d60e21b6064820152608490fd5b845162461bcd60e51b8152808401839052602760248201527f6e6f20726561736f6e20746f20726167655175697420616e20756e6c6f636b656044820152666420736861726560c81b6064820152608490fd5b6104d8919250853d87116104df575b6104d08183612308565b810190612494565b90386103c4565b503d6104c6565b87513d8a823e3d90fd5b6105079150853d87116104df576104d08183612308565b38610392565b88513d8b823e3d90fd5b5050346102655761053e61052a3661221e565b9561053995919594929461232a565b612b77565b51f35b5034610242576020908160031936011261067e5780356001600160a01b03811692908390036103375761057261232a565b835163516b636d60e11b81526001838201528581602481875afa9081156106745786916105f7575b5051156105be5750506bffffffffffffffffffffffff60a01b601254161760125551f35b835162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e6106088183612308565b81019082818303126106705780519067ffffffffffffffff821161066c570181601f8201121561067057805161063d81612560565b9261064a88519485612308565b81845284828401011161066c5761066691848085019101612192565b3861059a565b8780fd5b8680fd5b85513d88823e3d90fd5b8380fd5b82843461075a578060031936011261075a57508051600091600d546106a681612288565b8084529060019081811690811561073257506001146106e7575b50506106d1826106e3940383612308565b519182916020835260208301906121b5565b0390f35b600d600090815294506000805160206133698339815191525b82861061071a57505050918101602001916106d1826106c0565b80546020878701810191909152909501948101610700565b6106e3965085925060209150926106d19360ff191682840152151560051b82010194506106c0565b80fd5b50503461026557816003193601126102655760209060ff600b541690519015158152f35b505034610265578160031936011261026557602090600f549051908152f35b5034610242576020366003190112610242576011548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa91821561082757916108039161080894936020979261080f57501630146124b3565b61308f565b9051908152f35b6104d8919250873d81116104df576104d08183612308565b84513d87823e3d90fd5b5050346102655781600319360112610265576020906008549051908152f35b50346102425760208060031936011261067e57600b5491803561087884841c60ff161561305d565b64010000000064ff000000001980951617600b558086528183526001858720015462093a8081018091116109195742106108d7578552600382528385209160ff199283815416905552600283852001908154169055600b5416600b5551f35b5060649184519162461bcd60e51b8352820152601c60248201527f616c6c6f77206f6e65207765656b206265666f726520756e6c6f636b000000006044820152fd5b634e487b7160e01b875260118352602487fd5b50610936366121da565b60115484516331a9108f60e11b808252818601849052946001600160a01b0394909360209391926024928716919085818581865afa908115610bf4576109879189918d91610bfe5750163314612517565b8851631dc82a7560e01b918282528782015285818581865afa8015610bf4576109bb918c91610bd7575b50881630146124b3565b8851908152838682015284818481855afa8015610bcd576109e7918b91610bb0575b50871630146124b3565b600b54966109fa60ff89871c161561305d565b64ff000000001997881664010000000017600b55838a52858552888a206002015460ff1615610b7657838a52858552888a20543410610b3457908483928b948b51809481938252888b8301525afa908115610b2a578391610b0d575b50610a718380808c5134865af1610a6b61257c565b506125ac565b838352600385528883209660ff19978881541690558060115416803b15610337578492836064928d519687958694632142170760e11b8652168c85015233908401528860448401525af18015610b0357610aef575b50526003815284862060018482541617905552600283852001908154169055600b5416600b5551f35b610af8906122c2565b610670578638610ac6565b88513d84823e3d90fd5b610b249150853d87116104df576104d08183612308565b38610a56565b89513d85823e3d90fd5b885162461bcd60e51b81528087018690526017818501527f6d7573742073656e6420636f72726563742076616c75650000000000000000006044820152606490fd5b885162461bcd60e51b8152808701869052601581850152746d7573742062652072616765207175697474696e6760581b6044820152606490fd5b610bc79150863d88116104df576104d08183612308565b386109dd565b89513d8c823e3d90fd5b610bee9150873d89116104df576104d08183612308565b386109b1565b8a513d8d823e3d90fd5b6105079150883d8a116104df576104d08183612308565b5091906020806003193601126102425767ffffffffffffffff93803585811161033757366023820112156103375780820135868111610fc7578060051b6024923684838301011161066c5734156110bd5760ff885460a01c16858110156110ab576001610c829114612382565b610ca26801bc16d674ec800000610c9b600654346123c7565b11156123ea565b600954341061106957610cb9600854341115612448565b60ff600b5460181c16610e85575b5050509080929394955060018060a01b038481601154168751958680926318160ddd60e01b82525afa938415610e7b578794610e47575b50838752600185523486882055610d17346006546123c7565b600655600a5468010000000000000000811015610e35576001810180600a55811015610e2157908488949392600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801558484526002865260018785205560ff600b5460081c16600387528785209060ff80198354169115151617905560115416803b1561067e5783928392885194859384926335313c2160e11b845233908401525af18015610e1757610e03575b50507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc91606091845191348352339083015284820152a151f35b610e0c906122c2565b61067e578338610dc9565b85513d84823e3d90fd5b83603284634e487b7160e01b600052526000fd5b634e487b7160e01b8852604183528388fd5b9093508481813d8311610e74575b610e5f8183612308565b81010312610e6f57519238610cfe565b600080fd5b503d610e55565b86513d89823e3d90fd5b3388526005865260ff878920541661101c5760135487516f636f6e74726163742e6164647265737360801b88820190815270233932b739a6b2b935b632a83937bb32b960791b6030830152602182526001600160a01b039283169b60608301919082118383101761100857988188818e9f8e9f9b9c9d859f839052875190206321f8a72160e01b835260648801525afa918215610ffe578792610fcb575b50501660105491813b15610fc757895163879c84e960e01b815260608982015260648101869052946001600160fb1b0310610fc7578560848686819684988c849701858501378b83015233604483015281010301925af18015610fbd57610fa9575b505033855260058352838520805460ff191660011790558493929190388080610cc7565b610fb2906122c2565b610337578438610f85565b86513d84823e3d90fd5b8580fd5b610fef92506060908b903d8d11610ff6575b610fe78285612308565b010190612494565b3880610f23565b3d9150610fdd565b8b513d89823e3d90fd5b8760418a634e487b7160e01b600052526000fd5b865162461bcd60e51b81528086018790526022818601527f796f75206861766520616c7265616479206d61646520796f7572206465706f736044820152611a5d60f21b6064820152608490fd5b865162461bcd60e51b8152808601879052601e818601527f62656c6f77206d696e696d756d206465706f73697420666f7220706f6f6c00006044820152606490fd5b634e487b7160e01b8952602186528489fd5b865162461bcd60e51b81528086018790526012818601527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152606490fd5b5034610242576020366003190112610242578160209360ff923581526003855220541690519015158152f35b82843461075a578060031936011261075a57508051600091600c5461114481612288565b80845290600190818116908115610732575060011461116e5750506106d1826106e3940383612308565b600c600090815294506000805160206133298339815191525b8286106111a157505050918101602001916106d1826106c0565b80546020878701810191909152909501948101611187565b505034610265578160031936011261026557600b549051602091821c60ff1615158152f35b50829034610265576020806003193601126102425781359060ff845460a01c16838110156113525760016112129114612382565b6011548551631dc82a7560e01b81528481018490526001600160a01b0392918316908281602481855afa908115611348579161125d84926024948a9161132b575b50861630146124b3565b8851928380926331a9108f60e11b8252888a8301525afa9081156113215783600593926112939289916113045750163314612517565b838652600181526112a787872054856125c9565b33865252848420805460ff191690556011541691823b1561067e5790602484928387519586948593630852cd8d60e31b85528401525af180156112fa576112ed57509051f35b6112f6906122c2565b9051f35b83513d84823e3d90fd5b61131b9150843d86116104df576104d08183612308565b8a610392565b87513d88823e3d90fd5b6113429150843d86116104df576104d08183612308565b8b611253565b88513d89823e3d90fd5b634e487b7160e01b855260218452602485fd5b50503461026557816003193601126102655760209060ff600b5460101c1690519015158152f35b505034610265578160031936011261026557905490516001600160a01b039091168152602090f35b50503461026557816003193601126102655760125490516001600160a01b039091168152602090f35b50346102425760203660031901126102425735600a5481101561024257600a602093527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801549051908152f35b506020908160031936011261067e5780359060ff855460a01c16818110156115925760016114589114612382565b6114716801bc16d674ec800000610c9b600654346123c7565b6011548451631dc82a7560e01b8152828101849052906001600160a01b039081168583602481845afa9283156104e65760249387936114b9928b926104b757501630146124b3565b865192838092634f558e7960e01b825287878301525afa908115610674578691611565575b501561152e5750908160019285528282526115096114ff34868820546123c7565b6008541015612448565b84525280822061151a3482546123c7565b9055611528346006546123c7565b60065551f35b835162461bcd60e51b815290810183905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b6115859150843d861161158b575b61157d8183612308565b8101906124ff565b386114de565b503d611573565b634e487b7160e01b865260218252602486fd5b5050346102655781600319360112610265576020906006549051908152f35b503461024257602036600319011261024257356001600160a01b0381169081900361024257818360ff92602095526005855220541690519015158152f35b50503461026557816003193601126102655761161c61232a565b81546001600160a01b03198116835590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50913461075a57602036600319011261075a575061080860209235613102565b50503461026557816003193601126102655760209060ff600b5460181c1690519015158152f35b50503461026557816003193601126102655760115490516001600160a01b039091168152602090f35b50503461026557816003193601126102655780519082600e546116f181612288565b80855291600191808316908115611768575060011461171d575b5050506106d1826106e3940383612308565b9450600e85526000805160206133498339815191525b828610611750575050506106d18260206106e3958201019461170b565b80546020878701810191909152909501948101611733565b6106e39750869350602092506106d194915060ff191682840152151560051b8201019461170b565b50346102425761179f3661221e565b926117b0979695949792919261232a565b600b5460101c60ff16156118c257505050506117cf9293503691612674565b80516020918201208351600c549086816117e884612288565b91828252868201946001908882821691826000146118a457505060011461185c575b5061181792500382612308565b5190200361182a5750505b61053e6126e5565b606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b600c8b528791508a906000805160206133298339815191525b85831061188c57505061181793508201013861180a565b80548388018501528694508993909201918101611875565b60ff1916885261181795151560051b850101925038915061180a9050565b929550926118d1969194612b77565b611822565b82843461075a578060031936011261075a57908051918290600a549182855260208095018093600a84527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890845b818110611975575050508161193a910382612308565b83519485948186019282875251809352850193925b82811061195e57505050500390f35b83518552869550938101939281019260010161194f565b825484529288019260019283019201611924565b503461024257611998366121da565b9160ff855460a01c16818110156115925760016119b59114612382565b6011548451631dc82a7560e01b81528281018490526020916001600160a01b039081168383602481845afa90811561050d57611a0085926024958c91611aca575b50841630146124b3565b8851938480926331a9108f60e11b825289898301525afa80156104e657611a30928991611ab35750163314612517565b8286526001815284862054611a47856009546123c7565b11611a585750509061053e916125c9565b845162461bcd60e51b815291820152603060248201527f696e76616c696420616d6f756e742c207769746864726177206c657373206f7260448201526f081d5cd9481dda5d1a191c985dd05b1b60821b606482015260849150fd5b6105079150843d86116104df576104d08183612308565b611ae19150843d86116104df576104d08183612308565b386119f6565b5050346102655781600319360112610265576020906007549051908152f35b50503461026557816003193601126102655761182261232a565b509190346102655760209283600319360112610242576011548251631dc82a7560e01b815282358184018190526024966001600160a01b039493909290839082908a90829089165afa908115610e7b5790611b86918891611f88575b50851630146124b3565b60ff865460a01c1683811015611f765760018114611f34576064471115611ee457600314611edc578360135416828651818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b8152611bf1816122ec565b519020898851809481936321f8a72160e01b8352898301525afa908115610e7b578589899386938591611ebf575b50895163404df7b160e11b815230898201529485938492165af1908115610e7b578791611ea2575b50935b611c538261308f565b9482885260028452868820611c698782546123c7565b9055611c77866007546123c7565b600755816013541690875185810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b825260148152611cad816122ec565b5190209088519163bd02d0f560e01b83528783015285828c81865afa918215610bcd578a92611e6f575b508115159081611e66575b50611d5b575b50509086978392601198969798541694885195869384926331a9108f60e11b84528301525afa8015611d515761053e94849384938493611d32575b50508651915af1610a6b61257c565b611d49929350803d106104df576104d08183612308565b903880611d23565b85513d85823e3d90fd5b8488979293975181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b825260168152611d8f816122ec565b5190208b8a51809681936321f8a72160e01b83528b8301525afa92831561050d578993611e3e575b50611dc48260649261304a565b049160018311611def575b5097611de2849392899a99979899612553565b9597969192819950611ce8565b6000198301838111611e2c5792899a92611e1d8b8080611de2968e9f9d9e998c9b9a51915af1610a6b61257c565b929a5092935097969597611dcf565b634e487b7160e01b8a52601187528a8afd5b606491935082611e5d611dc492883d8a116104df576104d08183612308565b94925050611db7565b90501538611ce2565b9091508581813d8311611e9b575b611e878183612308565b81010312611e9757519038611cd7565b8980fd5b503d611e7d565b611eb99150833d851161158b5761157d8183612308565b38611c47565b611ed69150843d86116104df576104d08183612308565b38611c1f565b600193611c4a565b855162461bcd60e51b81528085018490526025818a01527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152808501849052601c818a01527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602184528787fd5b611f9f9150843d86116104df576104d08183612308565b38611b7c565b50503461026557816003193601126102655760135490516001600160a01b039091168152602090f35b5050346102655781600319360112610265576020906010549051908152f35b50346102425760203660031901126102425760209282913581526001845220549051908152f35b50346102425760203660031901126102425760209282913581526002845220549051908152f35b503461024257826003193601126102425760018060a01b03806013541660208451818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b8152612097816122ec565b51902060248651809481936321f8a72160e01b8352888301525afa90811561082757859161211f575b501633036120dd5750815460ff60a01b1916600360a01b17825551f35b6020606492519162461bcd60e51b8352820152601860248201527f6d7573742062652063616c6c6564206279206f7261636c6500000000000000006044820152fd5b612137915060203d81116104df576104d08183612308565b386120c0565b5050346102655781600319360112610265576106e39061215b613222565b90519182916020835260208301906121b5565b84903461026557816003193601126102655760209060ff600b5460081c1615158152f35b60005b8381106121a55750506000910152565b8181015183820152602001612195565b906020916121ce81518092818552858086019101612192565b601f01601f1916010190565b6040906003190112610e6f576004359060243590565b9181601f84011215610e6f5782359167ffffffffffffffff8311610e6f5760208381860195010111610e6f57565b906080600319830112610e6f5767ffffffffffffffff600435818111610e6f578361224b916004016121f0565b93909392602435838111610e6f5782612266916004016121f0565b93909392604435918211610e6f57612280916004016121f0565b909160643590565b90600182811c921680156122b8575b60208310146122a257565b634e487b7160e01b600052602260045260246000fd5b91607f1691612297565b67ffffffffffffffff81116122d657604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176122d657604052565b90601f8019910116810190811067ffffffffffffffff8211176122d657604052565b6000546001600160a01b0316330361233e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561238957565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116123d457565b634e487b7160e01b600052601160045260246000fd5b156123f157565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b1561244f57565b60405162461bcd60e51b815260206004820152601e60248201527f61626f7665206d6178696d756d206465706f73697420666f7220706f6f6c00006044820152606490fd5b90816020910312610e6f57516001600160a01b0381168103610e6f5790565b156124ba57565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b90816020910312610e6f57518015158103610e6f5790565b1561251e57565b60405162461bcd60e51b815260206004820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b919082039182116123d457565b67ffffffffffffffff81116122d657601f01601f191660200190565b3d156125a7573d9061258d82612560565b9161259b6040519384612308565b82523d6000602084013e565b606090565b156125b357565b634e487b7160e01b600052600160045260246000fd5b6000918183526001602052604083206125e3828254612553565b90556125f181600654612553565b6006556011546040516331a9108f60e11b81526004810193909352602090839060249082906001600160a01b03165afa918215612669579280928192612647958392612649575b50604051915af1610a6b61257c565b565b61266291925060203d81116104df576104d08183612308565b9038612638565b6040513d85823e3d90fd5b92919261268082612560565b9161268e6040519384612308565b829481845281830111610e6f578281602093846000960137010152565b156126b257565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec80000090814710612b41578160065403612b0657600080549260ff8460a01c169360049485811015612af35761272560018092146126ab565b60ff600b5460101c1615612abb5760018060a01b039384601354166040958651602095868201937f65787465726e616c2e636f6e74726163742e616464726573730000000000000085526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603984015260288352606083019067ffffffffffffffff9584831087841117612aa757828c52845190206321f8a72160e01b835260648501528890829060249082905afa928315612a9d578693612a79575b505060ff60a01b1916600160a11b178455600f54911695863b1561067e5790839188519586926304512a2360e31b845260808d8501528491600c5461281881612288565b908160848801528281169081600014612a5b5750600114612a10575b5060031985840381016024870152600d54879461285082612288565b918282528d85821691826000146129f15750506001146129a8575b50508584030160448601528592600e549161288583612288565b92838352878d83831692836000146129875750505060011461293b575b5050508391829160648301520391895af18015610fbd576128f2575b5050507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293945082519182523390820152a1565b821161292857507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce1929495508352849338806128be565b634e487b7160e01b815260418752602490fd5b918b939450600e88526000805160206133498339815191529288935b82851061296c575050500101908084806128a2565b80548486018701528b99508c98508d95909401938101612957565b60ff19168582015294151560051b90930190930194508392508190506128a2565b8c929550600d89526000805160206133698339815191529189925b8184106129d6575050010192388061286b565b80548385018601528c9a508d99508e949093019285016129c3565b60ff19168382015292151560051b90910190910194503890508061286b565b600c875290925085908a6000805160206133298339815191525b828410612a4057505050840160a4019138612834565b80548c850160a401528a98508b97509201918b908501612a2a565b905060a492945060ff191682870152151560051b8501019138612834565b612a9592935060609089903d8b11610ff657610fe78285612308565b9038806127d4565b8a513d88823e3d90fd5b50634e487b7160e01b875260418d52602487fd5b60405162461bcd60e51b815260208188015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b634e487b7160e01b845260218652602484fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b929094939194600160f81b3001908130116123d457604051602092838201908152838252612ba4826122ec565b612baf36868b612674565b848151910120915190200361300557600b5460ff8116612fab575b5060009260ff845460a01c16976004891015612f9757612bed6001809a146126ab565b67ffffffffffffffff92838111612f835780612c0a600c54612288565b98601f998a8111612f28575b5087908a8311600114612eb2578892612ea7575b5050600019600383901b1c1916908a1b17600c555b828211612e93578190612c53600d54612288565b888111612e38575b508590888311600114612dcb578692612dc0575b5050600019600383901b1c191690881b17600d555b8511612dac57612c95600e54612288565b848111612d5c575b5081938511600114612cea575091839491849394612cdf575b50501b916000199060031b1c191617600e555b600f556201000062ff000019600b541617600b55565b013592503880612cb6565b600e825260008051602061334983398151915293918591601f19831691905b88838310612d425750505010612d28575b505050811b01600e55612cc9565b0135600019600384901b60f8161c19169055388080612d1a565b868601358855909601959384019387935090810190612d09565b600e83526000805160206133498339815191528580880160051c820192848910612da3575b0160051c019087905b828110612d98575050612c9d565b848155018790612d8a565b92508192612d81565b634e487b7160e01b82526041600452602482fd5b013590503880612c6f565b600d87528a935060008051602061336983398151915291601f198416885b88828210612e225750508411612e08575b505050811b01600d55612c84565b0135600019600384901b60f8161c19169055388080612dfa565b8385013586558e97909501949283019201612de9565b909150600d86526000805160206133698339815191528880850160051c820192878610612e8a575b918c91869594930160051c01915b828110612e7c575050612c5b565b8881558594508c9101612e6e565b92508192612e60565b634e487b7160e01b85526041600452602485fd5b013590503880612c2a565b600c89528c935060008051602061332983398151915291601f1984168a5b8a828210612f095750508411612eef575b505050811b01600c55612c3f565b0135600019600384901b60f8161c19169055388080612ee1565b91929596849587849396013581550195019201908e9594939291612ed0565b909150600c88526000805160206133298339815191528a80850160051c820192898610612f7a575b918e91869594930160051c01915b828110612f6c575050612c16565b8a81558594508e9101612f5e565b92508192612f50565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526021600452602485fd5b6000549060ff8260a01c166004811015612fef57612fd991612fcf60ff92156126ab565b60101c16156125ac565b60ff60a01b1916600160a01b1760005538612bca565b634e487b7160e01b600052602160045260246000fd5b60405162461bcd60e51b815260048101839052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b80600019048211811515166123d4570290565b1561306457565b606460405162461bcd60e51b81526020600482015260046024820152636e6f706560e01b6044820152fd5b47156130fc5760009081526001602052604081205460026020526130c56040832054916130bf47600754906123c7565b9061304a565b6006549081156130e8570480156130e3576130e09250612553565b90565b505090565b634e487b7160e01b84526012600452602484fd5b50600090565b600060ff815460a01c1691600483101561320e57600183036131245750905090565b61312d9061308f565b9160018060a01b0360135416602060405181810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b825260148152613169816122ec565b51902060246040518094819363bd02d0f560e01b835260048301525afa9283156132025780936131cc575b505081151590816131c0575b506131a9575090565b9060646131b9826130e09461304a565b0490612553565b600391501415386131a0565b909192506020823d82116131fa575b816131e860209383612308565b8101031261075a575051903880613194565b3d91506131db565b604051903d90823e3d90fd5b634e487b7160e01b82526021600452602482fd5b60ff60005460a01c166004811015612fef5780156132ee57600281146132cb576001811461329c5760031461327a5760405161325d816122ec565b600d81526c7374617465206661696c75726560981b602082015290565b604051613286816122ec565b6006815265195e1a5d195960d21b602082015290565b506040516132a9816122ec565b6012815271616363657074696e67206465706f7369747360701b602082015290565b506040516132d8816122ec565b60068152651cdd185ad95960d21b602082015290565b506040516132fb816122ec565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fedf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7bb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fdd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5a26469706673582212209297bc0c836de5ae066679e122cbf72ec386edd70033edc7f9ade202d7ca181e64736f6c63430008100033a264697066735822122089a08d432138c20c316040cdd5de25ccd20e3268c31ac8d2a532199ee35eace964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address,bool,bool,uint256,uint256,bytes32)": {
        "details": "creates a new pool",
        "returns": {
          "_0": "address of new pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7043,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFrensPoolShare)7430"
      },
      {
        "astId": 7046,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFrensStorage)7530"
      }
    ],
    "types": {
      "t_contract(IFrensPoolShare)7430": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)7530": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      }
    }
  }
}