{
  "address": "0x467539b650A4F2aac09cf980501287d554806284",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "frensStorage_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x36c52393d03cf876348229bc6f1db037298fe87d3cda9d91366b44da4685635d",
  "receipt": {
    "to": null,
    "from": "0x6C55105954b7fd0c4Bf3df00dFD739fA71e2fD20",
    "contractAddress": "0x467539b650A4F2aac09cf980501287d554806284",
    "transactionIndex": 44,
    "gasUsed": "2366476",
    "logsBloom": "0x
    "blockHash": "0x22a49f5223f5278ed9855ad6be72d12b4f96ab6b31dcaded89b236a30dcc3add",
    "transactionHash": "0x36c52393d03cf876348229bc6f1db037298fe87d3cda9d91366b44da4685635d",
    "logs": [],
    "blockNumber": 9047988,
    "cumulativeGasUsed": "13994920",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB003C1756B0e6dDDC360372C7183B25D296CCCE3"
  ],
  "solcInputHash": "6a508fa8ccd1311f47bcdbf3960351a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"frensStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address)\":{\"details\":\"creates a new pool\",\"returns\":{\"_0\":\"address of new pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n///@title Frens Staking Pool Contract\\n///@author 0xWildhare and the FRENS team\\n///@dev A new instance of this contract is created everytime a user makes a new pool\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensOracle.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\ncontract StakingPool is IStakingPool, Ownable {\\n    event Stake(address depositContractAddress, address caller);\\n    event DepositToPool(uint amount, address depositer, uint id);\\n\\n    modifier noZeroValueTxn() {\\n        require(msg.value > 0, \\\"must deposit ether\\\");\\n        _;\\n    }\\n\\n    modifier maxTotDep() {\\n        require(\\n            msg.value + totalDeposits <= 32 ether,\\n            \\\"total deposits cannot be more than 32 Eth\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier mustBeAccepting() {\\n        require(\\n            currentState == PoolState.acceptingDeposits,\\n            \\\"not accepting deposits\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier correctPoolOnly(uint _id) {\\n        require(\\n            frensPoolShare.poolByIds(_id) == address(this),\\n            \\\"wrong staking pool for id\\\"\\n        );\\n        _;\\n    }\\n\\n    enum PoolState {\\n        awaitingValidatorInfo,\\n        acceptingDeposits,\\n        staked,\\n        exited\\n    }\\n    PoolState currentState;\\n\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    struct RageQuit {\\n        uint price;\\n        uint time;\\n        bool rageQuitting;\\n    }\\n\\n    //maps the ID for each FrensPoolShare NFT in the pool to the deposit for that share\\n    mapping(uint => uint) public depositForId;\\n    //maps each ID to the rewards it has already claimed (used in calculating the claimable rewards)\\n    mapping(uint => uint) public frenPastClaim;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => bool) public locked; //transfer locked (must use ragequit)\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => RageQuit) public rageQuitInfo;\\n\\n    //total eth deposited to pool by users (does not include attestation or block rewards)\\n    uint public totalDeposits;\\n    //total amount of rewards claimed from pool (used in calculating the claimable rewards)\\n    uint public totalClaims;\\n    //these are the ids which have deposits in this pool\\n    uint[] public idsInPool;\\n\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    bool public transferLocked;\\n    \\n    //validator public key for pool\\n    bytes public pubKey;\\n    //validator withdrawal credentials - must be set to pool address\\n    bytes public withdrawal_credentials;\\n    //bls signature for validator\\n    bytes public signature;\\n    //deposit data root for validator\\n    bytes32 public deposit_data_root;\\n\\n    IFrensPoolShare public frensPoolShare;\\n    IFrensArt public artForPool;\\n    IFrensStorage public frensStorage;\\n\\n    /**@dev when the pool is deploied by the factory, the owner, art contract,\\n     *storage contract, and if the validator is locked are all set.\\n     *The pool state is set according to whether or not the validator is locked.\\n     */\\n    constructor(address owner_, IFrensStorage frensStorage_) {\\n        frensStorage = frensStorage_;\\n        artForPool = IFrensArt(\\n            frensStorage.getAddress(\\n                keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensArt\\\"))\\n            )\\n        );\\n        frensPoolShare = IFrensPoolShare(\\n            frensStorage.getAddress(\\n                keccak256(\\n                    abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\")\\n                )\\n            )\\n        );\\n        currentState = PoolState.awaitingValidatorInfo;\\n        _transferOwnership(owner_);\\n    }\\n\\n    ///@notice This allows a user to deposit funds to the pool, and recieve an NFT representing their share\\n    ///@dev recieves funds and returns FrenspoolShare NFT\\n    function depositToPool()\\n        external\\n        payable\\n        noZeroValueTxn\\n        mustBeAccepting\\n        maxTotDep\\n    {\\n        uint id = frensPoolShare.totalSupply();\\n        depositForId[id] = msg.value;\\n        totalDeposits += msg.value;\\n        idsInPool.push(id);\\n        frenPastClaim[id] = 1; //this avoids future rounding errors in rewardclaims\\n        locked[id] = transferLocked;\\n        frensPoolShare.mint(msg.sender); //mint nft\\n        emit DepositToPool(msg.value, msg.sender, id);\\n    }\\n\\n    ///@notice allows a user to add funds to an existing NFT ID\\n    ///@dev recieves funds and increases deposit for a FrensPoolShare ID\\n    function addToDeposit(\\n        uint _id\\n    ) external payable mustBeAccepting maxTotDep correctPoolOnly(_id) {\\n        require(frensPoolShare.exists(_id), \\\"id does not exist\\\"); //id must exist\\n\\n        depositForId[_id] += msg.value;\\n        totalDeposits += msg.value;\\n    }\\n\\n   \\n    ///@dev stakes 32 ETH from this pool to the deposit contract. validator info must already be entered\\n    function stake() external onlyOwner {\\n        require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n        require(totalDeposits == 32 ether, \\\"not enough deposits\\\");\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n\\n        address depositContractAddress = frensStorage.getAddress(\\n            keccak256(\\n                abi.encodePacked(\\\"external.contract.address\\\", \\\"DepositContract\\\")\\n            )\\n        );\\n        currentState = PoolState.staked;\\n        IDepositContract(depositContractAddress).deposit{value: 32 ether}(\\n            pubKey,\\n            withdrawal_credentials,\\n            signature,\\n            deposit_data_root\\n        );\\n        emit Stake(depositContractAddress, msg.sender);\\n    }\\n\\n    ///@dev sets the validator info required when depositing to the deposit contract\\n    function setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        //get expected withdrawal_credentials based on contract address\\n        bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n        //compare expected withdrawal_credentials to provided\\n        require(\\n            keccak256(_withdrawal_credentials) ==\\n                keccak256(withdrawalCredFromAddr),\\n            \\\"withdrawal credential mismatch\\\"\\n        );\\n        \\n        require(currentState == PoolState.awaitingValidatorInfo, \\\"wrong state\\\");\\n        pubKey = _pubKey;\\n        withdrawal_credentials = _withdrawal_credentials;\\n        signature = _signature;\\n        deposit_data_root = _deposit_data_root;\\n        currentState = PoolState.acceptingDeposits;\\n    }\\n\\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\\n    ///@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\\n    function withdraw(uint _id, uint _amount) external mustBeAccepting {\\n        require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n        require(depositForId[_id] >= _amount, \\\"not enough deposited\\\");\\n        depositForId[_id] -= _amount;\\n        totalDeposits -= _amount;\\n        (bool success /*return data*/, ) = frensPoolShare.ownerOf(_id).call{\\n            value: _amount\\n        }(\\\"\\\");\\n        assert(success);\\n    }\\n\\n    ///@notice allows user to claim their portion of the rewards\\n    ///@dev calculates the rewards due to `_id` and sends them to the owner of `_id`\\n    function claim(uint _id) external correctPoolOnly(_id) {\\n        require(\\n            currentState != PoolState.acceptingDeposits,\\n            \\\"use withdraw when not staked\\\"\\n        );\\n        require(\\n            address(this).balance > 100,\\n            \\\"must be greater than 100 wei to claim\\\"\\n        );\\n        //has the validator exited?\\n        bool exited ;\\n        if (currentState != PoolState.exited) {\\n            IFrensOracle frensOracle = IFrensOracle(\\n                frensStorage.getAddress(\\n                    keccak256(\\n                        abi.encodePacked(\\\"contract.address\\\", \\\"FrensOracle\\\")\\n                    )\\n                )\\n            );\\n            exited = frensOracle.checkValidatorState(address(this));\\n            if (exited && currentState == PoolState.staked ){\\n                currentState = PoolState.exited;\\n            }\\n        } else exited = true;\\n        //get share for id\\n        uint amount = _getShare(_id);\\n        //claim\\n        frenPastClaim[_id] += amount;\\n        totalClaims += amount;\\n        //fee? not applied to exited\\n        uint feePercent = frensStorage.getUint(\\n            keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\"))\\n        );\\n        if (feePercent > 0 && !exited) {\\n            address feeRecipient = frensStorage.getAddress(\\n                keccak256(abi.encodePacked(\\\"protocol.fee.recipient\\\"))\\n            );\\n            uint feeAmount = (feePercent * amount) / 100;\\n            if (feeAmount > 1) {\\n                (bool success1 /*return data*/, ) = feeRecipient.call{\\n                    value: feeAmount - 1\\n                }(\\\"\\\"); //-1 wei to avoid rounding error issues\\n                assert(success1);\\n            }\\n            amount = amount - feeAmount;\\n        }\\n        (bool success2 /*return data*/, ) = frensPoolShare.ownerOf(_id).call{\\n            value: amount\\n        }(\\\"\\\");\\n        assert(success2);\\n    }\\n\\n    //getters\\n    function getIdsInThisPool() public view returns (uint[] memory) {\\n        return idsInPool;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id`\\n    function getShare(\\n        uint _id\\n    ) public view correctPoolOnly(_id) returns (uint) {\\n        return _getShare(_id);\\n    }\\n\\n    function _getShare(uint _id) internal view returns (uint) {\\n        if (address(this).balance == 0) return 0;\\n        uint frenDep = depositForId[_id];\\n        uint frenPastClaims = frenPastClaim[_id];\\n        uint totFrenRewards = ((frenDep *\\n            (address(this).balance + totalClaims)) / totalDeposits);\\n        if (totFrenRewards == 0) return 0;\\n        uint amount = totFrenRewards - frenPastClaims;\\n        return amount;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\\n    ///@dev this is used for the traits in the NFT\\n    function getDistributableShare(uint _id) public view returns (uint) {\\n        if (currentState == PoolState.acceptingDeposits) {\\n            return 0;\\n        } else {\\n            uint share = _getShare(_id);\\n            uint feePercent = frensStorage.getUint(\\n                keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\"))\\n            );\\n            if (feePercent > 0 && currentState != PoolState.exited) {\\n                uint feeAmount = (feePercent * share) / 100;\\n                share = share - feeAmount;\\n            }\\n            return share;\\n        }\\n    }\\n\\n    ///@return pool state\\n    function getState() public view returns (string memory) {\\n        if (currentState == PoolState.awaitingValidatorInfo)\\n            return \\\"awaiting validator info\\\";\\n        if (currentState == PoolState.staked) return \\\"staked\\\";\\n        if (currentState == PoolState.acceptingDeposits)\\n            return \\\"accepting deposits\\\";\\n        if (currentState == PoolState.exited) return \\\"exited\\\";\\n        return \\\"state failure\\\"; //should never happen\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakingPool, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n        uint uintFromAddress = uint256(uint160(a));\\n        bytes memory withdralDesired = abi.encodePacked(\\n            uintFromAddress +\\n                0x0100000000000000000000000000000000000000000000000000000000000000\\n        );\\n        return withdralDesired;\\n    }\\n\\n    ///@dev allows pool owner to change the art for the NFTs in the pool\\n    function setArt(IFrensArt newArtContract) external onlyOwner {\\n        IFrensArt newFrensArt = newArtContract;\\n        string memory newArt = newFrensArt.renderTokenById(1);\\n        require(bytes(newArt).length != 0, \\\"invalid art contract\\\");\\n        artForPool = newArtContract;\\n    }\\n\\n    // to support receiving ETH by default\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xc60380d7f40ca751943a87a4a938333077373adeee8954bfaf7b2ce99051ced4\",\"license\":\"MIT\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n///@title Frens Staking Pool Factory\\n///@author 0xWildhare and Frens team\\n///@dev allows user to create a new staking pool\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ncontract StakingPoolFactory is IStakingPoolFactory{\\n    event Create(\\n        address indexed contractAddress,\\n        address creator,\\n        address owner\\n    );\\n\\n    IFrensPoolShare frensPoolShare;\\n    IFrensStorage frensStorage;\\n\\n    constructor(IFrensStorage frensStorage_) {\\n       frensStorage = frensStorage_;\\n       frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n    }\\n\\n    ///@dev creates a new pool\\n    ///@return address of new pool\\n    function create(\\n        address _owner\\n    )\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        StakingPool stakingPool = new StakingPool(\\n            _owner,\\n            frensStorage\\n        );\\n        // allow this stakingpool to mint shares in our NFT contract\\n        IAccessControl(address(frensPoolShare)).grantRole(keccak256(\\\"MINTER_ROLE\\\"),address(stakingPool));\\n        emit Create(address(stakingPool), msg.sender, address(this));\\n        return (address(stakingPool));\\n    }\\n}\\n\",\"keccak256\":\"0x1973d3ef28adeb30009625755aef9c7fa36beee3f6e5cfdc169249e0a6d893e8\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    function get_deposit_count() external view returns (bytes memory);\\n\\n}\\n\",\"keccak256\":\"0x7590a7c7c977852560b0f2373e71ad175d1aa15d320d1238b2fe64e4cd1902f7\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensArt.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensArt {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfdb4c36608a20ac7f10ccb1b5d59ec26b25587860fb596dc12414b27591db2a0\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensOracle.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IFrensOracle {\\n\\n   function checkValidatorState(address pool) external returns(bool);\\n\\n   function setExiting(bytes memory pubKey, bool isExiting) external;\\n\\n}\",\"keccak256\":\"0xdf2291434faca3e9976a42d2328a4347ced5978b29477e40eb75642185afdf67\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  \\n  function poolByIds(uint _id) external view returns(address);\\n\\n  function mint(address userAddress) external;\\n\\n  function burn(uint tokenId) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0x39505e8b566da73b07b6f11e72e17e8fe4f195b371bc38e8d6aa7c83044a6456\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n   \\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n    function burnKeys() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getBool(bytes32 _key) external view returns (bool);   \\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setBool(bytes32 _key, bool _value) external;    \\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;    \\n\\n    // Arithmetic \\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    \\n}\\n\",\"keccak256\":\"0x426ac9a703a13d4127b56886421d55a8380292dadfb2693d2e8373316075f220\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPool {\\n\\n    function pubKey() external view returns(bytes memory);\\n\\n    function depositForId(uint _id) external view returns (uint);\\n\\n    function totalDeposits() external view returns(uint);\\n\\n    function transferLocked() external view returns(bool);\\n\\n    function locked(uint id) external view returns(bool);\\n\\n    function artForPool() external view returns (IFrensArt);\\n\\n    function owner() external view returns (address);\\n\\n    function depositToPool() external payable;\\n\\n    function addToDeposit(uint _id) external payable;\\n\\n    function withdraw(uint _id, uint _amount) external;\\n\\n    function claim(uint id) external;\\n\\n    function getIdsInThisPool() external view returns(uint[] memory);\\n\\n    function getShare(uint _id) external view returns (uint);\\n\\n    function getDistributableShare(uint _id) external view returns (uint);\\n\\n    function rageQuitInfo(uint id) external view returns(uint, uint, bool);\\n\\n    function setPubKey(\\n        bytes calldata pubKey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function getState() external view returns (string memory);\\n\\n    // function getDepositAmount(uint _id) external view returns(uint);\\n\\n    // function stake(\\n    //     bytes calldata pubkey,\\n    //     bytes calldata withdrawal_credentials,\\n    //     bytes calldata signature,\\n    //     bytes32 deposit_data_root\\n    // ) external;\\n\\n    function stake() external;\\n\\n    // function exitPool() external;\\n}\\n\",\"keccak256\":\"0xd8bac46068041b9cd5672b8a7b90238e794735ea8d783448d8730b1c9aac0c74\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPoolFactory {\\n\\n  function create(\\n    address _owner \\n    // bool _validatorLocked \\n    //bool frensLocked,\\n    //uint poolMin,\\n    //uint poolMax\\n   ) external returns(address);\\n\\n}\\n\",\"keccak256\":\"0xd8722279e82d757effdd11ae54236fbaa31c62a41afd11147490aef67f1f8e66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604090808252346101535780612a4a803803809161001f8285610158565b833960209283918101031261015357516001600160a01b0380821692909183900361015357600180546001600160a01b0319908116851790915584516f636f6e74726163742e6164647265737360801b8382019081526d4672656e73506f6f6c536861726560901b6030830152601e825291949092838701929091906001600160401b0384118585101761013d5760248484938193828c52885190206321f8a72160e01b835260448901525afa928315610132576000936100f5575b50505016906000541617600055516128ce908161017c8239f35b813d831161012b575b6101088185610158565b81010312610127575190828216820361012457503880806100db565b80fd5b5080fd5b503d6100fe565b86513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761013d5760405256fe6080604090808252600436101561001557600080fd5b600091823560e01c639ed933181461002c57600080fd5b3461015e57602036600319011261015e576001600160a01b0391600435838116919082900361018057836001541691612714928383019167ffffffffffffffff948484108685111761016c579286928594928a97969361018585398252602082015203019083f09384156101625780835416941693803b1561015e5782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101545761012d575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b81116101405760209350815238806100f5565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b89526041600452602489fd5b8480fdfe60806040818152346200021e57808262002714803803809162000023828562000255565b8339810103126200021e57620000398262000279565b6020928301516001600160a01b0380821694918590036200021e576200005f336200028e565b60018060a01b0319918583600f541617600f5584518181016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000af8162000223565b5190209086516321f8a72160e01b92838252600482015283816024818c5afa9081156200021357849392918691600091620001ca575b5090602492911687600e541617600e5588518481019182526d4672656e73506f6f6c536861726560901b6030820152601e8152620001238162000223565b519020918851998a938492835260048301525afa908115620001bf576000916200017b575b506200016d9495501690600d541617600d5560ff60a01b19600054166000556200028e565b516124399081620002db8239f35b86813d8311620001b7575b62000192818362000255565b81010312620001b45750620001ac6200016d949562000279565b859462000148565b80fd5b503d62000186565b85513d6000823e3d90fd5b85819495969293503d83116200020b575b620001e7818362000255565b81010312620001b45750839291856200020260249362000279565b909192620000e5565b503d620001db565b88513d6000823e3d90fd5b600080fd5b604081019081106001600160401b038211176200023f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200023f57604052565b51906001600160a01b03821682036200021e57565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816312686aae14611d57575080631865c57d14611d265780632cf2cd4814611cff5780632daad61d14611cd857806330dbf88714611caf578063379607f5146117f45780633a4b66f11461139d57806341c613831461137e578063441a3e70146111b757806345b58fe41461110457806351ff48471461106b578063591167c714611042578063678e300a14611022578063715018a614610fc55780637d88209714610fa65780638620891c14610e29578063888e9cf814610dd95780638ae578fd14610db05780638da5cb5b14610d88578063ac2a5dfd14610cef578063b45a3c0e14610cc3578063cfb5a5f814610c1a578063e2d9ae3e14610bfb578063e4a5027614610b20578063e6b1a3ae146109f1578063e920eec0146104d9578063f2fde38b14610407578063f9faa104146101ac5763fc03bad20361001157346101a85760203660031901126101a857606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b50826003193601126101a85734156103d05760ff835460a01c16818110156103bd5760016101da9114611ee8565b6101fa6801bc16d674ec8000006101f360055434611f2d565b1115611f50565b600d5482516318160ddd60e01b815260209290916001600160a01b0390849084908490829085165afa9283156103b357869361037f575b5082865260018452348587205561024a34600554611f2d565b6005556007546801000000000000000081101561036c57600181018060075581101561035757908387939260076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801558383526002855260018684205560ff60085416600386528684209060ff801983541691151516179055600d541690813b156101a857829160248392885194859384926335313c2160e11b845233908401525af1801561034d57610335575b50507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc91606091845191348352339083015284820152a151f35b61033e90611dfa565b6103495783386102fb565b8380fd5b85513d84823e3d90fd5b603283634e487b7160e01b6000525260246000fd5b634e487b7160e01b875260418352602487fd5b9092508381813d83116103ac575b6103978183611e40565b810103126103a757519138610231565b600080fd5b503d61038d565b85513d88823e3d90fd5b634e487b7160e01b845260218252602484fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b50346101a85760203660031901126101a8576001600160a01b03813581811692908390036104d557610437611e90565b8215610483575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b509190346109ed5760803660031901126109ed5767ffffffffffffffff9280358481116103495761050d9036908301611e62565b602495919580358381116109e9576105289036908601611e62565b9490936044358181116109e5576105429036908401611e62565b96909561054d611e90565b600160f81b3001958630116109d357895160209788820190815288825261057382611e24565b61057c8561206b565b6105888d519182611e40565b8581528981019036878701116109cf578e878784378b8883010152519020915190200361098d5760ff8b5460a01c168581101561097b576105c99015612031565b83811161096957806105dc600954611dc0565b601f9d818f809311610903575b508d809284116001146108905792610885575b50508160011b916000199060031b1c1916176009555b828211610873578190610626600a54611dc0565b8c8111610819575b508a908c83116001146107a6578b9261079b575b50508160011b916000199060031b1c191617600a555b851161078a57505061066b600b54611dc0565b86811161073c575b50849583116001146106c95750938394829394926106be575b50508160011b916000199060031b1c191617600b555b606435600c556000805460ff60a01b1916600160a01b17905551f35b01359050388061068c565b600b8552601f198316956000805160206123e4833981519152929186905b8882106107245750508360019596971061070a575b505050811b01600b556106a2565b0135600019600384901b60f8161c191690553880806106fc565b806001849682949587013581550195019201906106e7565b600b86526000805160206123e48339815191528780860160051c820192848710610781575b0160051c01905b8181106107755750610673565b60008155600101610768565b92508192610761565b634e487b7160e01b87526041905285fd5b013590503880610642565b600a8c526000805160206123a4833981519152925090601f1984168c5b898282106108035750509084600195949392106107e9575b505050811b01600a55610658565b0135600019600384901b60f8161c191690553880806107db565b60018496829395870135815501950192016107c3565b909150600a8b526000805160206123a48339815191528c80850160051c82019289861061086a575b9085949392910160051c01905b81811061085b575061062e565b6000815584935060010161084e565b92508192610841565b634e487b7160e01b8a5260418452848afd5b0135905038806105fc565b925090601f198416600984526000805160206123c4833981519152935b8b8282106108ed5750509084600195949392106108d3575b505050811b01600955610612565b0135600019600384901b60f8161c191690553880806108c5565b60018496829395870135815501950192016108ad565b9150915060098d528d6000805160206123c48339815191529080850160051c8201928b8610610960575b91818695939492940160051c01905b81811061094957506105e9565b90925060019193506000815501918e91849361093c565b9250819261092d565b634e487b7160e01b8b5260418552858bfd5b634e487b7160e01b8c5260218652868cfd5b895162461bcd60e51b8152808601889052601e818801527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b8e80fd5b634e487b7160e01b8b5260118552858bfd5b8880fd5b8680fd5b5080fd5b50346101a857602090816003193601126103495780356001600160a01b03811692908390036104d557610a22611e90565b835163516b636d60e11b81526001838201528581602481875afa9081156103b3578691610aa7575b505115610a6e5750506bffffffffffffffffffffffff60a01b600e541617600e5551f35b835162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e610ab88183611e40565b81019082818303126109e95780519067ffffffffffffffff8211610b1c570181601f820112156109e9578051610aed8161206b565b92610afa88519485611e40565b818452848284010111610b1c57610b1691848085019101611d78565b38610a4a565b8780fd5b828434610bf85780600319360112610bf857508051600091600a54610b4481611dc0565b80845290600190818116908115610bd05750600114610b85575b5050610b6f82610b81940383611e40565b51918291602083526020830190611d9b565b0390f35b600a600090815294506000805160206123a48339815191525b828610610bb85750505091810160200191610b6f82610b5e565b80546020878701810191909152909501948101610b9e565b610b8196508592506020915092610b6f9360ff191682840152151560051b8201019450610b5e565b80fd5b5050346109ed57816003193601126109ed57602090600c549051908152f35b50346101a85760203660031901126101a857600d548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa918215610cb95791610c7e91610c83949360209792610c8a575b50163014611fcd565b6120f4565b9051908152f35b610cab919250873d8111610cb2575b610ca38183611e40565b810190611fae565b9038610c75565b503d610c99565b84513d87823e3d90fd5b50346101a85760203660031901126101a8578160209360ff923581526003855220541690519015158152f35b828434610bf85780600319360112610bf857508051600091600954610d1381611dc0565b80845290600190818116908115610bd05750600114610d3d575050610b6f82610b81940383611e40565b6009600090815294506000805160206123c48339815191525b828610610d705750505091810160200191610b6f82610b5e565b80546020878701810191909152909501948101610d56565b5050346109ed57816003193601126109ed57905490516001600160a01b039091168152602090f35b5050346109ed57816003193601126109ed57600e5490516001600160a01b039091168152602090f35b50346101a85760203660031901126101a857356007548110156101a8576020925060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801549051908152f35b50602090816003193601126103495780359060ff855460a01c1681811015610f93576001610e579114611ee8565b610e706801bc16d674ec8000006101f360055434611f2d565b600d548451631dc82a7560e01b8152828101849052906001600160a01b039081168583602481845afa928315610f89576024938793610eb8928b92610f715750163014611fcd565b865192838092634f558e7960e01b825287878301525afa9081156103b3578691610f44575b5015610f0d575090600191845252808220610ef9348254611f2d565b9055610f0734600554611f2d565b60055551f35b835162461bcd60e51b815290810183905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b610f649150843d8611610f6a575b610f5c8183611e40565b810190612019565b38610edd565b503d610f52565b610cab919250853d8711610cb257610ca38183611e40565b87513d8a823e3d90fd5b634e487b7160e01b865260218252602486fd5b5050346109ed57816003193601126109ed576020906005549051908152f35b5050346109ed57816003193601126109ed57610fdf611e90565b600080546001600160a01b0319811682559151916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b509134610bf8576020366003190112610bf85750610c8360209235612167565b5050346109ed57816003193601126109ed57600d5490516001600160a01b039091168152602090f35b828434610bf85780600319360112610bf857508051600091600b5461108f81611dc0565b80845290600190818116908115610bd057506001146110b9575050610b6f82610b81940383611e40565b600b600090815294506000805160206123e48339815191525b8286106110ec5750505091810160200191610b6f82610b5e565b805460208787018101919091529095019481016110d2565b828434610bf85780600319360112610bf8579080519182906007549182855260208095018093600784527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890845b8181106111a35750505081611168910382611e40565b83519485948186019282875251809352850193925b82811061118c57505050500390f35b83518552869550938101939281019260010161117d565b825484529288019260019283019201611152565b50346101a857816003193601126101a8578035602480359260ff865460a01c168181101561136c5760016111eb9114611ee8565b600d5485516331a9108f60e11b8082528382018690526020949290916001600160a01b0391869082908690829086165afa80156113625782918b91611345575b50163303611313578589526001855286888a2054106112da57918493918695938a978852600185528988206112618a8254612087565b905561126f89600554612087565b600555600d54168951968794859384528301525afa80156112d0576112ae948493849384936112b1575b50508651915af16112a8612094565b506120c4565b51f35b6112c8929350803d10610cb257610ca38183611e40565b903880611299565b85513d85823e3d90fd5b875162461bcd60e51b8152808501869052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b875162461bcd60e51b8152808501869052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b61135c9150873d8911610cb257610ca38183611e40565b3861122b565b89513d8c823e3d90fd5b50634e487b7160e01b86526021905284fd5b5050346109ed57816003193601126109ed576020906006549051908152f35b509190346109ed5760031982813601126101a8576113b9611e90565b6801bc16d674ec800000938447106117c05784600554036117875783549060ff8260a01c169080821015611774576113f46001809314612031565b60018060a01b039687600f54169786516020958682017f65787465726e616c2e636f6e74726163742e616464726573730000000000000081526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603984015260288352606083019083821067ffffffffffffffff8311176117615797816024818e9f8e9f9b9c859e9f839052885190206321f8a72160e01b835260648901525afa928315611757578793611722575b505060ff60a01b1916600160a11b178555600c5491169690873b156104d55760809589519687956304512a2360e31b875286015285926009546114d781611dc0565b90816084890152838116908160001461170457506001146116b9575b5085840381016024870152600a54879461150c82611dc0565b918282528b858216918260001461169a575050600114611651575b50508584030160448601528592600b549161154183611dc0565b92838352878b8383169283600014611630575050506001146115e4575b5050508391829160648301520391875af18015610cb9576115ad575b507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19291839182519182523390820152a151f35b918391946115db7f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19294611dfa565b9491509161157a565b9189939450600b88526000805160206123e48339815191529288935b8285106116155750505001019080848061155e565b80548486018701528e99508a98508b95909401938101611600565b60ff19168582015294151560051b909301909301945083925081905061155e565b8a929550600a89526000805160206123a48339815191529189925b81841061167f5750500101923880611527565b80548385018601528f9a508b99508c9490930192850161166c565b60ff19168382015292151560051b909101909101945038905080611527565b600988529093508690896000805160206123c48339815191525b8284106116e957505050850160a40192386114f3565b80548b850160a401528e99508a98509201918a9084016116d3565b905060a492955060ff191682880152151560051b86010192386114f3565b6117479293506060908a903d8c1161174f575b61173f8285611e40565b010190611fae565b903880611495565b3d9150611735565b8b513d89823e3d90fd5b634e487b7160e01b8c526041875260248cfd5b634e487b7160e01b865260219052602485fd5b606490602084519162461bcd60e51b835282015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152fd5b606490602084519162461bcd60e51b8352820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152fd5b509190346109ed57602092836003193601126101a85783813560018060a01b0380600d5416855197888092631dc82a7560e01b8252858883015260249a8b915afa908115611bbc5790611852918891611c92575b5082163014611fcd565b60ff865460a01c1684811015611c805760018114611c3e576064471115611bee57600314611be35780600f5416838651818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b81526118bd81611e24565b519020898851809481936321f8a72160e01b83528a8301525afa908115611bbc57938289829594938a98978991611bc6575b50895163404df7b160e11b815230898201529889938492165af1948515611bbc578795611b9d575b508480611b72575b611b5c575b61192d826120f4565b9482885260028452868820611943878254611f2d565b905561195186600654611f2d565b60065581600f541690875185810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b82526014815261198781611e24565b5190209088519163bd02d0f560e01b83528783015285828c81865afa918215611362578a92611b29575b508115159081611b20575b50611a0b575b50509086978392600d98969798541694885195869384926331a9108f60e11b84528301525afa80156112d0576112ae948493849384936112b15750508651915af16112a8612094565b8488979293975181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b825260168152611a3f81611e24565b5190208b8a51809681936321f8a72160e01b83528b8301525afa928315611b16578993611aee575b50611a74826064926120e1565b049160018311611a9f575b5097611a92849392899a99979899612087565b95979691928199506119c2565b6000198301838111611adc5792899a92611acd8b8080611a92968e9f9d9e998c9b9a51915af16112a8612094565b929a5092935097969597611a7f565b634e487b7160e01b8a52601187528a8afd5b606491935082611b0d611a7492883d8a11610cb257610ca38183611e40565b94925050611a67565b88513d8b823e3d90fd5b905015386119bc565b9091508581813d8311611b55575b611b418183611e40565b81010312611b51575190386119b1565b8980fd5b503d611b37565b865460ff60a01b1916600360a01b178755611924565b5060ff875460a01c1684811015611b8b5760021461191f565b634e487b7160e01b8852602185528888fd5b611bb5919550833d8511610f6a57610f5c8183611e40565b9338611917565b86513d89823e3d90fd5b611bdd9150843d8611610cb257610ca38183611e40565b386118ef565b929190600193611924565b855162461bcd60e51b81528086018590526025818a01527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152808601859052601c818a01527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602185528787fd5b611ca99150853d8711610cb257610ca38183611e40565b38611848565b5050346109ed57816003193601126109ed57600f5490516001600160a01b039091168152602090f35b50346101a85760203660031901126101a85760209282913581526001845220549051908152f35b50346101a85760203660031901126101a85760209282913581526002845220549051908152f35b5050346109ed57816003193601126109ed57610b8190611d44612287565b9051918291602083526020830190611d9b565b8490346109ed57816003193601126109ed5760209060ff6008541615158152f35b60005b838110611d8b5750506000910152565b8181015183820152602001611d7b565b90602091611db481518092818552858086019101611d78565b601f01601f1916010190565b90600182811c92168015611df0575b6020831014611dda57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611dcf565b67ffffffffffffffff8111611e0e57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611e0e57604052565b90601f8019910116810190811067ffffffffffffffff821117611e0e57604052565b9181601f840112156103a75782359167ffffffffffffffff83116103a757602083818601950101116103a757565b6000546001600160a01b03163303611ea457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611eef57565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b91908201809211611f3a57565b634e487b7160e01b600052601160045260246000fd5b15611f5757565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b908160209103126103a757516001600160a01b03811681036103a75790565b15611fd457565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b908160209103126103a7575180151581036103a75790565b1561203857565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b67ffffffffffffffff8111611e0e57601f01601f191660200190565b91908203918211611f3a57565b3d156120bf573d906120a58261206b565b916120b36040519384611e40565b82523d6000602084013e565b606090565b156120cb57565b634e487b7160e01b600052600160045260246000fd5b8060001904821181151516611f3a570290565b471561216157600090815260016020526040812054600260205261212a6040832054916121244760065490611f2d565b906120e1565b60055490811561214d57048015612148576121459250612087565b90565b505090565b634e487b7160e01b84526012600452602484fd5b50600090565b600060ff815460a01c1691600483101561227357600183036121895750905090565b612192906120f4565b9160018060a01b03600f5416602060405181810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b8252601481526121ce81611e24565b51902060246040518094819363bd02d0f560e01b835260048301525afa928315612267578093612231575b50508115159081612225575b5061220e575090565b90606461221e82612145946120e1565b0490612087565b60039150141538612205565b909192506020823d821161225f575b8161224d60209383611e40565b81010312610bf85750519038806121f9565b3d9150612240565b604051903d90823e3d90fd5b634e487b7160e01b82526021600452602482fd5b60ff60005460a01c16600481101561238d57801561235357600281146123305760018114612301576003146122df576040516122c281611e24565b600d81526c7374617465206661696c75726560981b602082015290565b6040516122eb81611e24565b6006815265195e1a5d195960d21b602082015290565b5060405161230e81611e24565b6012815271616363657074696e67206465706f7369747360701b602082015290565b5060405161233d81611e24565b60068152651cdd185ad95960d21b602082015290565b5060405161236081611e24565b601781527f6177616974696e672076616c696461746f7220696e666f000000000000000000602082015290565b634e487b7160e01b600052602160045260246000fdfec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a86e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9a2646970667358221220c043199a7626cdb032cac398287b31c6f1a99afb76f90b94d1fb3aa34fd7ccca64736f6c63430008100033a2646970667358221220906e6fe9ed61cd93243b26794e04c9dd6d5fa980a8bb8c1a18d3d1caa4194e7264736f6c63430008100033",
  "deployedBytecode": "0x6080604090808252600436101561001557600080fd5b600091823560e01c639ed933181461002c57600080fd5b3461015e57602036600319011261015e576001600160a01b0391600435838116919082900361018057836001541691612714928383019167ffffffffffffffff948484108685111761016c579286928594928a97969361018585398252602082015203019083f09384156101625780835416941693803b1561015e5782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101545761012d575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b81116101405760209350815238806100f5565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b89526041600452602489fd5b8480fdfe60806040818152346200021e57808262002714803803809162000023828562000255565b8339810103126200021e57620000398262000279565b6020928301516001600160a01b0380821694918590036200021e576200005f336200028e565b60018060a01b0319918583600f541617600f5584518181016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000af8162000223565b5190209086516321f8a72160e01b92838252600482015283816024818c5afa9081156200021357849392918691600091620001ca575b5090602492911687600e541617600e5588518481019182526d4672656e73506f6f6c536861726560901b6030820152601e8152620001238162000223565b519020918851998a938492835260048301525afa908115620001bf576000916200017b575b506200016d9495501690600d541617600d5560ff60a01b19600054166000556200028e565b516124399081620002db8239f35b86813d8311620001b7575b62000192818362000255565b81010312620001b45750620001ac6200016d949562000279565b859462000148565b80fd5b503d62000186565b85513d6000823e3d90fd5b85819495969293503d83116200020b575b620001e7818362000255565b81010312620001b45750839291856200020260249362000279565b909192620000e5565b503d620001db565b88513d6000823e3d90fd5b600080fd5b604081019081106001600160401b038211176200023f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200023f57604052565b51906001600160a01b03821682036200021e57565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c90816312686aae14611d57575080631865c57d14611d265780632cf2cd4814611cff5780632daad61d14611cd857806330dbf88714611caf578063379607f5146117f45780633a4b66f11461139d57806341c613831461137e578063441a3e70146111b757806345b58fe41461110457806351ff48471461106b578063591167c714611042578063678e300a14611022578063715018a614610fc55780637d88209714610fa65780638620891c14610e29578063888e9cf814610dd95780638ae578fd14610db05780638da5cb5b14610d88578063ac2a5dfd14610cef578063b45a3c0e14610cc3578063cfb5a5f814610c1a578063e2d9ae3e14610bfb578063e4a5027614610b20578063e6b1a3ae146109f1578063e920eec0146104d9578063f2fde38b14610407578063f9faa104146101ac5763fc03bad20361001157346101a85760203660031901126101a857606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b50826003193601126101a85734156103d05760ff835460a01c16818110156103bd5760016101da9114611ee8565b6101fa6801bc16d674ec8000006101f360055434611f2d565b1115611f50565b600d5482516318160ddd60e01b815260209290916001600160a01b0390849084908490829085165afa9283156103b357869361037f575b5082865260018452348587205561024a34600554611f2d565b6005556007546801000000000000000081101561036c57600181018060075581101561035757908387939260076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801558383526002855260018684205560ff60085416600386528684209060ff801983541691151516179055600d541690813b156101a857829160248392885194859384926335313c2160e11b845233908401525af1801561034d57610335575b50507fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc91606091845191348352339083015284820152a151f35b61033e90611dfa565b6103495783386102fb565b8380fd5b85513d84823e3d90fd5b603283634e487b7160e01b6000525260246000fd5b634e487b7160e01b875260418352602487fd5b9092508381813d83116103ac575b6103978183611e40565b810103126103a757519138610231565b600080fd5b503d61038d565b85513d88823e3d90fd5b634e487b7160e01b845260218252602484fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b50346101a85760203660031901126101a8576001600160a01b03813581811692908390036104d557610437611e90565b8215610483575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b509190346109ed5760803660031901126109ed5767ffffffffffffffff9280358481116103495761050d9036908301611e62565b602495919580358381116109e9576105289036908601611e62565b9490936044358181116109e5576105429036908401611e62565b96909561054d611e90565b600160f81b3001958630116109d357895160209788820190815288825261057382611e24565b61057c8561206b565b6105888d519182611e40565b8581528981019036878701116109cf578e878784378b8883010152519020915190200361098d5760ff8b5460a01c168581101561097b576105c99015612031565b83811161096957806105dc600954611dc0565b601f9d818f809311610903575b508d809284116001146108905792610885575b50508160011b916000199060031b1c1916176009555b828211610873578190610626600a54611dc0565b8c8111610819575b508a908c83116001146107a6578b9261079b575b50508160011b916000199060031b1c191617600a555b851161078a57505061066b600b54611dc0565b86811161073c575b50849583116001146106c95750938394829394926106be575b50508160011b916000199060031b1c191617600b555b606435600c556000805460ff60a01b1916600160a01b17905551f35b01359050388061068c565b600b8552601f198316956000805160206123e4833981519152929186905b8882106107245750508360019596971061070a575b505050811b01600b556106a2565b0135600019600384901b60f8161c191690553880806106fc565b806001849682949587013581550195019201906106e7565b600b86526000805160206123e48339815191528780860160051c820192848710610781575b0160051c01905b8181106107755750610673565b60008155600101610768565b92508192610761565b634e487b7160e01b87526041905285fd5b013590503880610642565b600a8c526000805160206123a4833981519152925090601f1984168c5b898282106108035750509084600195949392106107e9575b505050811b01600a55610658565b0135600019600384901b60f8161c191690553880806107db565b60018496829395870135815501950192016107c3565b909150600a8b526000805160206123a48339815191528c80850160051c82019289861061086a575b9085949392910160051c01905b81811061085b575061062e565b6000815584935060010161084e565b92508192610841565b634e487b7160e01b8a5260418452848afd5b0135905038806105fc565b925090601f198416600984526000805160206123c4833981519152935b8b8282106108ed5750509084600195949392106108d3575b505050811b01600955610612565b0135600019600384901b60f8161c191690553880806108c5565b60018496829395870135815501950192016108ad565b9150915060098d528d6000805160206123c48339815191529080850160051c8201928b8610610960575b91818695939492940160051c01905b81811061094957506105e9565b90925060019193506000815501918e91849361093c565b9250819261092d565b634e487b7160e01b8b5260418552858bfd5b634e487b7160e01b8c5260218652868cfd5b895162461bcd60e51b8152808601889052601e818801527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b8e80fd5b634e487b7160e01b8b5260118552858bfd5b8880fd5b8680fd5b5080fd5b50346101a857602090816003193601126103495780356001600160a01b03811692908390036104d557610a22611e90565b835163516b636d60e11b81526001838201528581602481875afa9081156103b3578691610aa7575b505115610a6e5750506bffffffffffffffffffffffff60a01b600e541617600e5551f35b835162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e610ab88183611e40565b81019082818303126109e95780519067ffffffffffffffff8211610b1c570181601f820112156109e9578051610aed8161206b565b92610afa88519485611e40565b818452848284010111610b1c57610b1691848085019101611d78565b38610a4a565b8780fd5b828434610bf85780600319360112610bf857508051600091600a54610b4481611dc0565b80845290600190818116908115610bd05750600114610b85575b5050610b6f82610b81940383611e40565b51918291602083526020830190611d9b565b0390f35b600a600090815294506000805160206123a48339815191525b828610610bb85750505091810160200191610b6f82610b5e565b80546020878701810191909152909501948101610b9e565b610b8196508592506020915092610b6f9360ff191682840152151560051b8201019450610b5e565b80fd5b5050346109ed57816003193601126109ed57602090600c549051908152f35b50346101a85760203660031901126101a857600d548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa918215610cb95791610c7e91610c83949360209792610c8a575b50163014611fcd565b6120f4565b9051908152f35b610cab919250873d8111610cb2575b610ca38183611e40565b810190611fae565b9038610c75565b503d610c99565b84513d87823e3d90fd5b50346101a85760203660031901126101a8578160209360ff923581526003855220541690519015158152f35b828434610bf85780600319360112610bf857508051600091600954610d1381611dc0565b80845290600190818116908115610bd05750600114610d3d575050610b6f82610b81940383611e40565b6009600090815294506000805160206123c48339815191525b828610610d705750505091810160200191610b6f82610b5e565b80546020878701810191909152909501948101610d56565b5050346109ed57816003193601126109ed57905490516001600160a01b039091168152602090f35b5050346109ed57816003193601126109ed57600e5490516001600160a01b039091168152602090f35b50346101a85760203660031901126101a857356007548110156101a8576020925060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801549051908152f35b50602090816003193601126103495780359060ff855460a01c1681811015610f93576001610e579114611ee8565b610e706801bc16d674ec8000006101f360055434611f2d565b600d548451631dc82a7560e01b8152828101849052906001600160a01b039081168583602481845afa928315610f89576024938793610eb8928b92610f715750163014611fcd565b865192838092634f558e7960e01b825287878301525afa9081156103b3578691610f44575b5015610f0d575090600191845252808220610ef9348254611f2d565b9055610f0734600554611f2d565b60055551f35b835162461bcd60e51b815290810183905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b610f649150843d8611610f6a575b610f5c8183611e40565b810190612019565b38610edd565b503d610f52565b610cab919250853d8711610cb257610ca38183611e40565b87513d8a823e3d90fd5b634e487b7160e01b865260218252602486fd5b5050346109ed57816003193601126109ed576020906005549051908152f35b5050346109ed57816003193601126109ed57610fdf611e90565b600080546001600160a01b0319811682559151916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b509134610bf8576020366003190112610bf85750610c8360209235612167565b5050346109ed57816003193601126109ed57600d5490516001600160a01b039091168152602090f35b828434610bf85780600319360112610bf857508051600091600b5461108f81611dc0565b80845290600190818116908115610bd057506001146110b9575050610b6f82610b81940383611e40565b600b600090815294506000805160206123e48339815191525b8286106110ec5750505091810160200191610b6f82610b5e565b805460208787018101919091529095019481016110d2565b828434610bf85780600319360112610bf8579080519182906007549182855260208095018093600784527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890845b8181106111a35750505081611168910382611e40565b83519485948186019282875251809352850193925b82811061118c57505050500390f35b83518552869550938101939281019260010161117d565b825484529288019260019283019201611152565b50346101a857816003193601126101a8578035602480359260ff865460a01c168181101561136c5760016111eb9114611ee8565b600d5485516331a9108f60e11b8082528382018690526020949290916001600160a01b0391869082908690829086165afa80156113625782918b91611345575b50163303611313578589526001855286888a2054106112da57918493918695938a978852600185528988206112618a8254612087565b905561126f89600554612087565b600555600d54168951968794859384528301525afa80156112d0576112ae948493849384936112b1575b50508651915af16112a8612094565b506120c4565b51f35b6112c8929350803d10610cb257610ca38183611e40565b903880611299565b85513d85823e3d90fd5b875162461bcd60e51b8152808501869052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b875162461bcd60e51b8152808501869052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b61135c9150873d8911610cb257610ca38183611e40565b3861122b565b89513d8c823e3d90fd5b50634e487b7160e01b86526021905284fd5b5050346109ed57816003193601126109ed576020906006549051908152f35b509190346109ed5760031982813601126101a8576113b9611e90565b6801bc16d674ec800000938447106117c05784600554036117875783549060ff8260a01c169080821015611774576113f46001809314612031565b60018060a01b039687600f54169786516020958682017f65787465726e616c2e636f6e74726163742e616464726573730000000000000081526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603984015260288352606083019083821067ffffffffffffffff8311176117615797816024818e9f8e9f9b9c859e9f839052885190206321f8a72160e01b835260648901525afa928315611757578793611722575b505060ff60a01b1916600160a11b178555600c5491169690873b156104d55760809589519687956304512a2360e31b875286015285926009546114d781611dc0565b90816084890152838116908160001461170457506001146116b9575b5085840381016024870152600a54879461150c82611dc0565b918282528b858216918260001461169a575050600114611651575b50508584030160448601528592600b549161154183611dc0565b92838352878b8383169283600014611630575050506001146115e4575b5050508391829160648301520391875af18015610cb9576115ad575b507f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19291839182519182523390820152a151f35b918391946115db7f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19294611dfa565b9491509161157a565b9189939450600b88526000805160206123e48339815191529288935b8285106116155750505001019080848061155e565b80548486018701528e99508a98508b95909401938101611600565b60ff19168582015294151560051b909301909301945083925081905061155e565b8a929550600a89526000805160206123a48339815191529189925b81841061167f5750500101923880611527565b80548385018601528f9a508b99508c9490930192850161166c565b60ff19168382015292151560051b909101909101945038905080611527565b600988529093508690896000805160206123c48339815191525b8284106116e957505050850160a40192386114f3565b80548b850160a401528e99508a98509201918a9084016116d3565b905060a492955060ff191682880152151560051b86010192386114f3565b6117479293506060908a903d8c1161174f575b61173f8285611e40565b010190611fae565b903880611495565b3d9150611735565b8b513d89823e3d90fd5b634e487b7160e01b8c526041875260248cfd5b634e487b7160e01b865260219052602485fd5b606490602084519162461bcd60e51b835282015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152fd5b606490602084519162461bcd60e51b8352820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152fd5b509190346109ed57602092836003193601126101a85783813560018060a01b0380600d5416855197888092631dc82a7560e01b8252858883015260249a8b915afa908115611bbc5790611852918891611c92575b5082163014611fcd565b60ff865460a01c1684811015611c805760018114611c3e576064471115611bee57600314611be35780600f5416838651818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b81526118bd81611e24565b519020898851809481936321f8a72160e01b83528a8301525afa908115611bbc57938289829594938a98978991611bc6575b50895163404df7b160e11b815230898201529889938492165af1948515611bbc578795611b9d575b508480611b72575b611b5c575b61192d826120f4565b9482885260028452868820611943878254611f2d565b905561195186600654611f2d565b60065581600f541690875185810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b82526014815261198781611e24565b5190209088519163bd02d0f560e01b83528783015285828c81865afa918215611362578a92611b29575b508115159081611b20575b50611a0b575b50509086978392600d98969798541694885195869384926331a9108f60e11b84528301525afa80156112d0576112ae948493849384936112b15750508651915af16112a8612094565b8488979293975181810190751c1c9bdd1bd8dbdb0b9999594b9c9958da5c1a595b9d60521b825260168152611a3f81611e24565b5190208b8a51809681936321f8a72160e01b83528b8301525afa928315611b16578993611aee575b50611a74826064926120e1565b049160018311611a9f575b5097611a92849392899a99979899612087565b95979691928199506119c2565b6000198301838111611adc5792899a92611acd8b8080611a92968e9f9d9e998c9b9a51915af16112a8612094565b929a5092935097969597611a7f565b634e487b7160e01b8a52601187528a8afd5b606491935082611b0d611a7492883d8a11610cb257610ca38183611e40565b94925050611a67565b88513d8b823e3d90fd5b905015386119bc565b9091508581813d8311611b55575b611b418183611e40565b81010312611b51575190386119b1565b8980fd5b503d611b37565b865460ff60a01b1916600360a01b178755611924565b5060ff875460a01c1684811015611b8b5760021461191f565b634e487b7160e01b8852602185528888fd5b611bb5919550833d8511610f6a57610f5c8183611e40565b9338611917565b86513d89823e3d90fd5b611bdd9150843d8611610cb257610ca38183611e40565b386118ef565b929190600193611924565b855162461bcd60e51b81528086018590526025818a01527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152808601859052601c818a01527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602185528787fd5b611ca99150853d8711610cb257610ca38183611e40565b38611848565b5050346109ed57816003193601126109ed57600f5490516001600160a01b039091168152602090f35b50346101a85760203660031901126101a85760209282913581526001845220549051908152f35b50346101a85760203660031901126101a85760209282913581526002845220549051908152f35b5050346109ed57816003193601126109ed57610b8190611d44612287565b9051918291602083526020830190611d9b565b8490346109ed57816003193601126109ed5760209060ff6008541615158152f35b60005b838110611d8b5750506000910152565b8181015183820152602001611d7b565b90602091611db481518092818552858086019101611d78565b601f01601f1916010190565b90600182811c92168015611df0575b6020831014611dda57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611dcf565b67ffffffffffffffff8111611e0e57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611e0e57604052565b90601f8019910116810190811067ffffffffffffffff821117611e0e57604052565b9181601f840112156103a75782359167ffffffffffffffff83116103a757602083818601950101116103a757565b6000546001600160a01b03163303611ea457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611eef57565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b91908201809211611f3a57565b634e487b7160e01b600052601160045260246000fd5b15611f5757565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b908160209103126103a757516001600160a01b03811681036103a75790565b15611fd457565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b908160209103126103a7575180151581036103a75790565b1561203857565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b67ffffffffffffffff8111611e0e57601f01601f191660200190565b91908203918211611f3a57565b3d156120bf573d906120a58261206b565b916120b36040519384611e40565b82523d6000602084013e565b606090565b156120cb57565b634e487b7160e01b600052600160045260246000fd5b8060001904821181151516611f3a570290565b471561216157600090815260016020526040812054600260205261212a6040832054916121244760065490611f2d565b906120e1565b60055490811561214d57048015612148576121459250612087565b90565b505090565b634e487b7160e01b84526012600452602484fd5b50600090565b600060ff815460a01c1691600483101561227357600183036121895750905090565b612192906120f4565b9160018060a01b03600f5416602060405181810190731c1c9bdd1bd8dbdb0b9999594b9c195c98d95b9d60621b8252601481526121ce81611e24565b51902060246040518094819363bd02d0f560e01b835260048301525afa928315612267578093612231575b50508115159081612225575b5061220e575090565b90606461221e82612145946120e1565b0490612087565b60039150141538612205565b909192506020823d821161225f575b8161224d60209383611e40565b81010312610bf85750519038806121f9565b3d9150612240565b604051903d90823e3d90fd5b634e487b7160e01b82526021600452602482fd5b60ff60005460a01c16600481101561238d57801561235357600281146123305760018114612301576003146122df576040516122c281611e24565b600d81526c7374617465206661696c75726560981b602082015290565b6040516122eb81611e24565b6006815265195e1a5d195960d21b602082015290565b5060405161230e81611e24565b6012815271616363657074696e67206465706f7369747360701b602082015290565b5060405161233d81611e24565b60068152651cdd185ad95960d21b602082015290565b5060405161236081611e24565b601781527f6177616974696e672076616c696461746f7220696e666f000000000000000000602082015290565b634e487b7160e01b600052602160045260246000fdfec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a86e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9a2646970667358221220c043199a7626cdb032cac398287b31c6f1a99afb76f90b94d1fb3aa34fd7ccca64736f6c63430008100033a2646970667358221220906e6fe9ed61cd93243b26794e04c9dd6d5fa980a8bb8c1a18d3d1caa4194e7264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address)": {
        "details": "creates a new pool",
        "returns": {
          "_0": "address of new pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5978,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFrensPoolShare)6337"
      },
      {
        "astId": 5981,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFrensStorage)6437"
      }
    ],
    "types": {
      "t_contract(IFrensPoolShare)6337": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)6437": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      }
    }
  }
}